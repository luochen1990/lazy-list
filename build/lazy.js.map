{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","lazy.coffee"],"names":[],"mappings":"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","file":"lazy.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","this_module = ({Symbol}) ->\n\n\t# LazyList definition: nil, LazyList, Iterator,\n\n\tLazyList = (f) -> # construct a LazyList from a function.\n\t\tf[Symbol.iterator] = -> f()\n\t\tf.toString = -> \"LazyList\"\n\t\treturn f\n\n\tnil = LazyList -> nil # xs is empty <==> xs is nil or xs() is nil or xs()() is nil... <==> last xs is nil\n\tnil.toString = -> 'nil'\n\n\tIterator = (it) -> # construct an Iterator(which is a function with status) from a function.\n\t\tit.next = ->\n\t\t\tr = it()\n\t\t\t{value: r, done: r == nil}\n\t\tit.toString = -> \"Iterator\"\n\t\treturn it\n\n\t# LazyList constants: naturals, range, primes,\n\n\tnaturals =\n\t\tLazyList ->\n\t\t\ti = -1\n\t\t\tIterator ->\n\t\t\t\t++i\n\n\trange = (args...) ->\n\t\tif args.length == 0\n\t\t\tnaturals\n\t\telse if args.length == 1\n\t\t\tLazyList ->\n\t\t\t\t[stop] = args\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < stop then i else nil\n\t\telse if args.length == 2\n\t\t\tLazyList ->\n\t\t\t\t[start, stop] = args\n\t\t\t\tif start < stop\n\t\t\t\t\ti = start - 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif ++i < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\ti = start + 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif --i > stop then i else nil\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\t[start, stop, step] = args\n\t\t\t\tthrow 'ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE' if stop != start and (stop - start) * step < 0\n\t\t\t\ti = start - step\n\t\t\t\tif start < stop\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) > stop then i else nil\n\n\tprimes = LazyList -> do\n\t\tfilter((x) -> all((p) -> x % p != 0) takeWhile((p) -> p * p <= x) range(2, Infinity)) range(2, Infinity)\n\n\t# LazyList producers: lazy, enumerate, iterate, random_gen, ranged_random_gen, permutation_gen,\n\n\tlazy = (arr) -> #make a LazyList from Function/LazyList/ES6Lazy/Array/String\n\t\tif typeof arr is 'function'\n\t\t\tif arr[Symbol.iterator]? #arr is LazyList\n\t\t\t\tarr\n\t\t\telse #arr is Function\n\t\t\t\tLazyList arr\n\t\telse if arr[Symbol.iterator]? #arr is ES6Lazy\n\t\t\tLazyList ->\n\t\t\t\tit = arr[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tr = it.next()\n\t\t\t\t\tif r.done then nil else r.value\n\t\telse #arr is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\ti += 1\n\t\t\t\t\tif i < arr.length\n\t\t\t\t\t\tarr[i]\n\t\t\t\t\telse\n\t\t\t\t\t\tnil\n\n\tenumerate = (it) -> # Iterator with index(with key for object)\n\t\tif it[Symbol.iterator]? or it instanceof Array\n\t\t\tzip(naturals, it)\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\tkeys = Object.keys(it)\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < keys.length then [(k = keys[i]), it[k]] else nil\n\n\trepeat = (x) -> # repeat x\n\t\tLazyList ->\n\t\t\tIterator ->\n\t\t\t\tx\n\n\titerate = (next, init) -> #function next should not change it's argument\n\t\tLazyList ->\n\t\t\tstatus = init\n\t\t\tIterator ->\n\t\t\t\tlast = status\n\t\t\t\tstatus = next status\n\t\t\t\treturn last\n\n\trandom_gen = do ->\n\t\thash = (x) ->\n\t\t\tx = Math.sin(x) * 1e4\n\t\t\tx - Math.floor(x)\n\t\t(opts) ->\n\t\t\tseed = hash(opts?.seed ? Math.random())\n\t\t\titerate hash, seed\n\n\tranged_random_gen = (range, opts) ->\n\t\tseed = opts?.seed ? Math.random()\n\t\tmap((x) -> Math.floor(x * range)) random_gen(seed: seed)\n\n\tpermutation_gen = do ->\n\t\tnext_permutation = (x) ->\n\t\t\tx = x[...]\n\t\t\tl = x.length - 1\n\t\t\t--l while l >= 1 and x[l] <= x[l - 1]\n\n\t\t\tif (l != 0)\n\t\t\t\tm = x.length - 1\n\t\t\t\t--m while m > l - 1 and x[m] <= x[l - 1]\n\t\t\t\t[x[m], x[l - 1]] = [x[l - 1], x[m]]\n\n\t\t\tr = x.length - 1\n\t\t\twhile(l < r)\n\t\t\t\t[x[l], x[r]] = [x[r], x[l]]\n\t\t\t\t++l\n\t\t\t\t--r\n\t\t\treturn x\n\n\t\t(arr) ->\n\t\t\tif arr.length == 0 then nil else\n\t\t\t\tcons(arr[...]) takeWhile((ls) -> json(ls) != json(arr)) drop(1) iterate(next_permutation, arr)\n\n\t# LazyList decorators: take, takeWhile, drop, dropWhile, cons, concat, map, filter, scanl, streak, reverse,\n\n\ttake = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tc = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++c < n then iter() else nil\n\n\ttakeWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil and ok(x) then x else nil\n\n\tdrop = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tfinished = false\n\t\t\t\t(finished or= (iter() is nil); break if finished) for i in [0...n]\n\t\t\t\tif finished then (-> nil) else iter\n\n\tdropWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tnull while ok(x = iter()) and x isnt nil\n\t\t\t\tIterator ->\n\t\t\t\t\t[prevx, x] = [x, iter()]\n\t\t\t\t\treturn prevx\n\n\tcons = (x) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = null\n\t\t\t\tIterator ->\n\t\t\t\t\tif iter is null\n\t\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\t\treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\treturn iter()\n\n\tconcat = (ws) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\txs_unused = true\n\t\t\t\titer = lazy(ws)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif xs_unused\n\t\t\t\t\t\tif (x = iter()) isnt nil\n\t\t\t\t\t\t\treturn x\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\t\t\txs_unused = false\n\t\t\t\t\t\t\treturn iter()\n\t\t\t\t\telse\n\t\t\t\t\t\treturn iter()\n\n\tmap = (f) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil then f(x) else nil\n\n\tfilter = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tnull while not ok(x = iter()) and x isnt nil\n\t\t\t\t\treturn x\n\n\tscanl = (f, r) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tgot = r\n\t\t\t\t\tr = if (x = iter()) isnt nil then f(r, x) else nil\n\t\t\t\t\treturn got\n\n\tstreak = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tbuf = []\n\t\t\t\tIterator ->\n\t\t\t\t\treturn nil if (x = iter()) is nil\n\t\t\t\t\tbuf.push(x)\n\t\t\t\t\tbuf.shift(1) if buf.length > n\n\t\t\t\t\treturn buf[...]\n\n\treverse = (xs) ->\n\t\tarr = list lazy(xs)\n\t\treturn lazy arr.reverse()\n\n\t# LazyList combiners: join, zip, zipWith, cartProd,\n\n\tjoin = (xss) ->\n\t\tLazyList ->\n\t\t\txs_iter = lazy(xss)[Symbol.iterator]()\n\t\t\txs = xs_iter()\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tIterator ->\n\t\t\t\tif (x = iter()) isnt nil\n\t\t\t\t\treturn x\n\t\t\t\telse if (xs = xs_iter()) isnt nil\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\treturn iter()\n\t\t\t\telse\n\t\t\t\t\treturn nil\n\n\t{zip, zipWith} = do ->\n\t\tfinished = (arr) ->\n\t\t\tfor x in arr\n\t\t\t\treturn true if x is nil\n\t\t\treturn false\n\n\t\tzip = (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn next\n\n\t\tzipWith = (f) -> (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn f(next...)\n\n\t\treturn {zip, zipWith}\n\n\tcartProd = do -> # cartesian product\n\t\tinc_vector = (limits) ->\n\t\t\tlen_minus_1 = limits.length - 1\n\t\t\t(vec) ->\n\t\t\t\ti = len_minus_1\n\t\t\t\tvec[i--] = 0 until ++vec[i] < limits[i] or i <= 0\n\t\t\t\treturn vec\n\n\t\tapply_vector = (space) ->\n\t\t\tlen = space.length\n\t\t\t(vec) ->\n\t\t\t\t(space[i][vec[i]] for i in [0...len])\n\n\t\t(xss...) ->\n\t\t\tLazyList ->\n\t\t\t\txss = (list(xs) for xs in xss)\n\t\t\t\tlimits = (xss[i].length for i in [0...xss.length])\n\t\t\t\t(return nil if len is 0) for len in limits\n\t\t\t\tinc = inc_vector(limits)\n\t\t\t\tget_value = apply_vector(xss)\n\t\t\t\tv = (0 for i in [0...xss.length])\n\t\t\t\tIterator ->\n\t\t\t\t\tif v[0] < limits[0] then (r = get_value v; inc v; r) else nil\n\n\t# LazyList consumers: list, last, length, foldl, best, all, any, foreach,\n\n\tlist = (xs) -> #force list elements of the LazyList to get an array\n\t\tif xs instanceof Array\n\t\t\txs\n\t\telse if typeof xs is 'function'\n\t\t\tit = xs[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if xs[Symbol.iterator]?\n\t\t\tit = lazy(xs)[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if typeof xs is 'number'\n\t\t\tn = xs\n\t\t\t(xs) -> list take(n) xs\n\t\telse\n\t\t\tthrow Error 'list(xs): xs is neither LazyList nor Array'\n\n\tlast = (xs) -> #returns nil if xs is empty\n\t\tif not xs[Symbol.iterator]? then xs[xs.length - 1] ? nil else\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = nil\n\t\t\tr = x while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tlength = (xs) ->\n\t\tif not xs[Symbol.iterator]? then xs.length else\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = 0\n\t\t\t++r while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tfoldl = (f, init) ->\n\t\t(xs) ->\n\t\t\tr = init\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = f(r, x) while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tbest = (better) ->\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\treturn null if (r = iter()) is nil\n\t\t\twhile (it = iter()) isnt nil\n\t\t\t\tr = if better(it, r) then it else r\n\t\t\treturn r\n\n\tall = (f) ->\n\t\tf = ((x) -> x is f) if typeof(f) isnt 'function'\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\twhile (x = iter()) isnt nil\n\t\t\t\treturn false if not f(x)\n\t\t\treturn true\n\n\tany = (f) ->\n\t\tall_not = all (x) -> not f(x)\n\t\t(xs) -> not (all_not xs)\n\n\tbrk = -> brk\n\tbrk.toString = -> 'foreach.break'\n\n\tforeach = (xs, callback, fruit) ->\n\t\titer = lazy(xs)[Symbol.iterator]()\n\t\twhile (x = iter()) isnt nil\n\t\t\tbreak if callback(x, fruit) is brk\n\t\tfruit\n\n\tObject.defineProperties foreach,\n\t\tbreak:\n\t\t\twritable: false\n\t\t\tconfigurable: false\n\t\t\tenumerable: false\n\t\t\tvalue: brk\n\n\treturn {\n\t\t# LazyList definition\n\t\tnil, LazyList, Iterator, Symbol,\n\n\t\t# LazyList constants\n\t\tnaturals, range, primes,\n\n\t\t# LazyList producers\n\t\tlazy, enumerate, repeat, iterate, random_gen, ranged_random_gen, permutation_gen,\n\n\t\t# LazyList decorators\n\t\tcons, concat, map, filter, take, takeWhile, drop, dropWhile, scanl, streak, reverse,\n\n\t\t# LazyList combiners\n\t\tjoin, zip, zipWith, cartProd,\n\n\t\t# LazyList consumers\n\t\tlist, last, length, foldl, best, all, any, foreach,\n\t}\n\nmodule.exports = this_module\n\tSymbol: Symbol ? {iterator: 'iter'}\n"]}