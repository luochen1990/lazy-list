{"version":3,"sources":["lazy.coffee"],"names":[],"mappings":"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","file":"lazy.js","sourcesContent":["this_module = ({Symbol}) ->\n\tCustomErrorType = (errorName) ->\n\t\t(msg) ->\n\t\t\tCustomError = (msg)->\n\t\t\t\tself = new Error msg\n\t\t\t\tself.name = errorName\n\t\t\t\tself.__proto__ = CustomError.prototype\n\t\t\t\treturn self\n\t\t\tCustomError.prototype.__proto__= Error.prototype\n\t\t\treturn new CustomError(msg)\n\n\tListError = CustomErrorType('ListError')\n\n\t# LazyList definition: nil, LazyList, Iterator,\n\n\tLazyList = (f) -> # construct a LazyList from a function.\n\t\tf[Symbol.iterator] = -> f()\n\t\tf.toString = -> \"LazyList\"\n\t\tf.toJSON = -> list f\n\t\treturn f\n\n\tnil = LazyList -> nil # xs is empty <==> xs is nil or xs() is nil or xs()() is nil... <==> last xs is nil\n\tnil.toString = -> 'nil'\n\n\tIterator = (it) -> # construct an Iterator(which is a function with status) from a function.\n\t\tit.next = ->\n\t\t\tr = it()\n\t\t\t{value: r, done: r == nil}\n\t\tit.toString = -> \"Iterator\"\n\t\treturn it\n\n\t# LazyList constants: naturals, range, primes,\n\n\tnaturals =\n\t\tLazyList ->\n\t\t\ti = -1\n\t\t\tIterator ->\n\t\t\t\t++i\n\n\trange = (args...) ->\n\t\tif args.length == 0\n\t\t\tnaturals\n\t\telse if args.length == 1\n\t\t\tLazyList ->\n\t\t\t\t[stop] = args\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < stop then i else nil\n\t\telse if args.length == 2\n\t\t\tLazyList ->\n\t\t\t\t[start, stop] = args\n\t\t\t\tif start < stop\n\t\t\t\t\ti = start - 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif ++i < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\ti = start + 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif --i > stop then i else nil\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\t[start, stop, step] = args\n\t\t\t\tthrow ListError 'ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE' if stop != start and (stop - start) * step < 0\n\t\t\t\ti = start - step\n\t\t\t\tif start < stop\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) > stop then i else nil\n\n\tprimes = LazyList -> do\n\t\tfilter((x) -> all((p) -> x % p != 0) takeWhile((p) -> p * p <= x) range(2, Infinity)) range(2, Infinity)\n\n\t# LazyList producers: lazy, enumerate, iterate, randoms, permutations, powerset\n\n\tlazy = (xs) -> #make a LazyList from Function/LazyList/Array/String/ES6Lazy\n\t\tif typeof xs is 'function'\n\t\t\tif xs[Symbol.iterator]? #xs is LazyList\n\t\t\t\txs\n\t\t\telse #xs is Function\n\t\t\t\tLazyList xs\n\t\telse if xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif (++i) < xs.length then xs[i] else nil\n\t\telse if xs[Symbol.iterator]? #xs is ES6Lazy\n\t\t\tLazyList ->\n\t\t\t\tit = xs[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tr = it.next()\n\t\t\t\t\tif r.done then nil else r.value\n\t\telse\n\t\t\tthrow ListError 'lazy(xs): xs is neither Array nor Iterable'\n\n\tenumerate = (it) -> # Iterator with index(with key for object)\n\t\tif it[Symbol.iterator]? or it instanceof Array\n\t\t\tzip(naturals, it)\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\tkeys = Object.keys(it)\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < keys.length then [(k = keys[i]), it[k]] else nil\n\n\trepeat = (x) -> # repeat x\n\t\tLazyList ->\n\t\t\tIterator ->\n\t\t\t\tx\n\n\titerate = (next, init) -> #function next should not change it's argument\n\t\tLazyList ->\n\t\t\tst = init\n\t\t\tIterator ->\n\t\t\t\tr = st\n\t\t\t\tst = next st\n\t\t\t\treturn r\n\n\trandoms = do -> #NOTE: unstandard!\n\t\tsalt = Math.PI / 3.0\n\n\t\thash = (x) ->\n\t\t\tx = Math.sin(x + salt) * 1e4\n\t\t\tx - Math.floor(x)\n\n\n\t\tnormal = (seed) -> iterate hash, hash(seed)\n\n\t\t(opts) ->\n\t\t\tif not opts?\n\t\t\t\tnormal(0)\n\t\t\telse if typeof opts is 'number'\n\t\t\t\tnormal(opts)\n\t\t\telse\n\t\t\t\tseed = opts.seed ? 0\n\t\t\t\trg = opts.range\n\t\t\t\tif rg?\n\t\t\t\t\tif typeof rg is 'number'\n\t\t\t\t\t\tmap((x) -> Math.floor(x * rg)) normal(seed)\n\t\t\t\t\telse\n\t\t\t\t\t\t[s, k] = [rg[0], rg[1] - rg[0] + 1]\n\t\t\t\t\t\tmap((x) -> s + Math.floor(x * k)) normal(seed)\n\t\t\t\telse\n\t\t\t\t\tnormal(seed)\n\n\tpermutations = do ->\n\t\tnext_permutation = (x) ->\n\t\t\tx = x[...]\n\t\t\tl = x.length - 1\n\t\t\t--l while l >= 1 and x[l] <= x[l - 1]\n\n\t\t\tif (l != 0)\n\t\t\t\tm = x.length - 1\n\t\t\t\t--m while m > l - 1 and x[m] <= x[l - 1]\n\t\t\t\t[x[m], x[l - 1]] = [x[l - 1], x[m]]\n\n\t\t\tr = x.length - 1\n\t\t\twhile(l < r)\n\t\t\t\t[x[l], x[r]] = [x[r], x[l]]\n\t\t\t\t++l\n\t\t\t\t--r\n\t\t\treturn x\n\n\t\t(xs) ->\n\t\t\tarr = list xs\n\t\t\tif arr.length == 0 then nil else\n\t\t\t\tcons(arr[...]) takeWhile((ls) -> json(ls) != json(arr)) drop(1) iterate(next_permutation, arr)\n\n\tpowerset = (xs) -> if length(xs) == 0 then [[]] else (ss = powerset(drop(1) xs); concat([ss, map(cons head(xs))(ss)]))\n\n\t# LazyList decorators: take, takeWhile, drop, dropWhile, cons, map, filter, scanl, streak, streak2, reverse, sort, sortOn\n\n\ttake = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tc = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++c < n then iter() else nil\n\n\ttakeWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil and ok(x) then x else nil\n\n\tdrop = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tfinished = false\n\t\t\t\t(finished or= (iter() is nil); break if finished) for i in [0...n]\n\t\t\t\tif finished then (-> nil) else iter\n\n\tdropWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tnull while ok(x = iter()) and x isnt nil\n\t\t\t\tIterator ->\n\t\t\t\t\t[prevx, x] = [x, iter()]\n\t\t\t\t\treturn prevx\n\n\tcons = (x) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = null\n\t\t\t\tIterator ->\n\t\t\t\t\tif iter is null\n\t\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\t\treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\treturn iter()\n\n\tmap = (f) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil then f(x) else nil\n\n\tfilter = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tnull while (x = iter()) isnt nil and not ok(x)\n\t\t\t\t\treturn x\n\n\tscanl = (op) -> (r) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tgot = r\n\t\t\t\t\tr = if (x = iter()) isnt nil then op(r)(x) else nil\n\t\t\t\t\treturn got\n\n\tstreak = (n) -> #NOTE: unstandard!\n\t\tif n < 1\n\t\t\tnil\n\t\telse\n\t\t\t(xs) ->\n\t\t\t\tdrop(n - 1) LazyList ->\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\tbuf = []\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\treturn nil if (x = iter()) is nil\n\t\t\t\t\t\tbuf.push(x)\n\t\t\t\t\t\tbuf.shift(1) if buf.length > n\n\t\t\t\t\t\treturn buf[...]\n\n\tstreak2 = (n) -> (xs) -> streak(n) concat [xs, take(n - 1) xs] #NOTE: unstandard!\n\n\treverse = (xs) ->\n\t\tif xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = xs.length\n\t\t\t\tIterator ->\n\t\t\t\t\tif (--i) >= 0 then xs[i] else nil\n\t\telse #NOTE: strict!\n\t\t\tlist(lazy(xs)).reverse()\n\n\tsort = (xs) -> #NOTE: strict!\n\t\tarr = list lazy(xs)\n\t\treturn arr.sort((a, b) -> (a > b) - (a < b))\n\n\tsortOn = (f) -> #NOTE: strict! # f :: (Comparable b) => a -> b\n\t\t(xs) ->\n\t\t\tarr = list lazy(xs)\n\t\t\treturn arr.sort((a, b) -> ((fa = f(a)) > (fb = f(b))) - (fa < fb))\n\n\t# LazyList spliters: partition, groupOn,\n\n\tgroupOn = (f) -> #NOTE: strict! # f :: (Hashable b) => a -> b\n\t\t(xs) ->\n\t\t\tmemo = {}\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = f(x)\n\t\t\t\tmemo[y] ?= []\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn (v for k, v of memo)\n\n\tpartition = (f) -> #NOTE: strict! # f :: a -> Bool\n\t\t(xs) ->\n\t\t\tmemo = [[], []]\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = !f(x) + 0\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn memo\n\n\t# LazyList combiners: concat, zip, zipWith, cartProd,\n\n\tconcat = (xss) ->\n\t\txss = filter((x) -> x.constructor not in [Array, String] or x.length > 0) xss #TODO: more precise\n\t\tLazyList ->\n\t\t\txs_iter = lazy(xss)[Symbol.iterator]()\n\t\t\txs = xs_iter()\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tIterator ->\n\t\t\t\tif (x = iter()) isnt nil\n\t\t\t\t\treturn x\n\t\t\t\telse if (xs = xs_iter()) isnt nil\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\treturn iter()\n\t\t\t\telse\n\t\t\t\t\treturn nil\n\n\t{zip, zipWith} = do ->\n\t\tfinished = (arr) ->\n\t\t\tfor x in arr\n\t\t\t\treturn true if x is nil\n\t\t\treturn false\n\n\t\tzip = (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn next\n\n\t\tzipWith = (f) -> (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn f(next...)\n\n\t\treturn {zip, zipWith}\n\n\tcartProd = do -> # cartesian product\n\t\tinc_vector = (limits) ->\n\t\t\tlen_minus_1 = limits.length - 1\n\t\t\t(vec) ->\n\t\t\t\ti = len_minus_1\n\t\t\t\tvec[i--] = 0 until ++vec[i] < limits[i] or i <= 0\n\t\t\t\treturn vec\n\n\t\tapply_vector = (space) ->\n\t\t\tlen = space.length\n\t\t\t(vec) ->\n\t\t\t\t(space[i][vec[i]] for i in [0...len])\n\n\t\t(xss...) ->\n\t\t\tLazyList ->\n\t\t\t\txss = (list(xs) for xs in xss)\n\t\t\t\tlimits = (xss[i].length for i in [0...xss.length])\n\t\t\t\t(return nil if len is 0) for len in limits\n\t\t\t\tinc = inc_vector(limits)\n\t\t\t\tget_value = apply_vector(xss)\n\t\t\t\tv = (0 for i in [0...xss.length])\n\t\t\t\tIterator ->\n\t\t\t\t\tif v[0] < limits[0] then (r = get_value v; inc v; r) else nil\n\n\t# LazyList consumers: list, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, foreach,\n\n\tlist = (xs) -> #force list elements of the LazyList to get an array\n\t\tif xs instanceof Array\n\t\t\txs\n\t\telse if typeof xs is 'function'\n\t\t\tit = xs[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if xs[Symbol.iterator]?\n\t\t\tit = lazy(xs)[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if typeof xs is 'number'\n\t\t\tn = xs\n\t\t\t(xs) -> list take(n) xs\n\t\telse\n\t\t\tthrow ListError 'list(xs): xs is neither Array nor Iterable'\n\n\thead = (xs) -> #returns error if xs is empty\n\t\tif xs.constructor in [Array, String]\n\t\t\tif xs.length > 0\n\t\t\t\treturn xs[0]\n\t\t\telse\n\t\t\t\tthrow ListError \"head() used on empty list.\"\n\t\telse\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tif (r = iter()) isnt nil\n\t\t\t\treturn r\n\t\t\telse\n\t\t\t\tthrow ListError \"head() used on empty list.\"\n\n\ttail = drop(1)\n\n\tlast = (xs) -> #returns error if xs is empty\n\t\tif xs.constructor in [Array, String]\n\t\t\tif xs.length > 0\n\t\t\t\treturn xs[xs.length - 1]\n\t\t\telse\n\t\t\t\tthrow ListError \"last() used on empty list.\"\n\t\telse\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = nil\n\t\t\tr = x while (x = iter()) isnt nil\n\t\t\tif r isnt nil\n\t\t\t\treturn r\n\t\t\telse\n\t\t\t\tthrow ListError \"last() used on empty list.\"\n\n\tlength = (xs) ->\n\t\tif xs.constructor in [Array, String] then xs.length else\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = 0\n\t\t\t++r while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tfoldl = (op) -> (init) ->\n\t\t(xs) ->\n\t\t\tr = init\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = op(r)(x) while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tbest = (better) -> #NOTE: unstandard!\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\treturn null if (r = iter()) is nil\n\t\t\twhile (it = iter()) isnt nil\n\t\t\t\tr = if better(it, r) then it else r\n\t\t\treturn r\n\n\tmaximumOn = (f) -> best((a, b) -> f(a) > f(b)) #NOTE: unstandard!\n\tminimumOn = (f) -> best((a, b) -> f(a) < f(b)) #NOTE: unstandard!\n\n\tmaximum = best((x, y) -> x > y)\n\tminimum = best((x, y) -> x < y)\n\n\tall = (f) ->\n\t\tf = ((x) -> x is f) if typeof(f) isnt 'function'\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\twhile (x = iter()) isnt nil\n\t\t\t\treturn false if not f(x)\n\t\t\treturn true\n\n\tany = (f) ->\n\t\tall_not = all (x) -> not f(x)\n\t\t(xs) -> not (all_not xs)\n\n\tfromList = (pairs) ->\n\t\tr = {}\n\t\tforeach pairs, ([k, v]) ->\n\t\t\tr[k] = v if v isnt undefined\n\t\treturn r\n\n\tbrk = -> brk\n\tbrk.toString = -> 'foreach.break'\n\n\tforeach = (xs, callback, fruit) ->\n\t\titer = lazy(xs)[Symbol.iterator]()\n\t\twhile (x = iter()) isnt nil\n\t\t\tbreak if callback(x, fruit) is brk\n\t\tfruit\n\n\tObject.defineProperties foreach,\n\t\tbreak:\n\t\t\twritable: false\n\t\t\tconfigurable: false\n\t\t\tenumerable: false\n\t\t\tvalue: brk\n\n\treturn {\n\t\t# LazyList definition\n\t\tnil, LazyList, Iterator, Symbol,\n\n\t\t# LazyList constants\n\t\tnaturals, range, primes,\n\n\t\t# LazyList producers\n\t\tlazy, enumerate, repeat, iterate, randoms, permutations, powerset,\n\n\t\t# LazyList decorators\n\t\tcons, map, filter, take, takeWhile, tail, drop, dropWhile, scanl, streak, streak2, reverse, sort, sortOn,\n\n\t\t# LazyList spliters\n\t\tgroupOn, partition,\n\n\t\t# LazyList combiners\n\t\tconcat, zip, zipWith, cartProd,\n\n\t\t# LazyList consumers\n\t\tlist, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, fromList, foreach,\n\t}\n\nmodule.exports = this_module\n\tSymbol: Symbol ? {iterator: 'iter'}\n\n"]}