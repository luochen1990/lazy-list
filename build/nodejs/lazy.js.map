{"version":3,"sources":["lazy.coffee"],"names":[],"mappings":"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","file":"lazy.js","sourceRoot":"/source/","sourcesContent":["this_module = ({Symbol}) ->\n\n\t# LazyList definition: nil, LazyList, Iterator,\n\n\tLazyList = (f) -> # construct a LazyList from a function.\n\t\tf[Symbol.iterator] = -> f()\n\t\tf.toString = -> \"LazyList\"\n\t\treturn f\n\n\tnil = LazyList -> nil # xs is empty <==> xs is nil or xs() is nil or xs()() is nil... <==> last xs is nil\n\tnil.toString = -> 'nil'\n\n\tIterator = (it) -> # construct an Iterator(which is a function with status) from a function.\n\t\tit.next = ->\n\t\t\tr = it()\n\t\t\t{value: r, done: r == nil}\n\t\tit.toString = -> \"Iterator\"\n\t\treturn it\n\n\t# LazyList constants: naturals, range, primes,\n\n\tnaturals =\n\t\tLazyList ->\n\t\t\ti = -1\n\t\t\tIterator ->\n\t\t\t\t++i\n\n\trange = (args...) ->\n\t\tif args.length == 0\n\t\t\tnaturals\n\t\telse if args.length == 1\n\t\t\tLazyList ->\n\t\t\t\t[stop] = args\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < stop then i else nil\n\t\telse if args.length == 2\n\t\t\tLazyList ->\n\t\t\t\t[start, stop] = args\n\t\t\t\tif start < stop\n\t\t\t\t\ti = start - 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif ++i < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\ti = start + 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif --i > stop then i else nil\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\t[start, stop, step] = args\n\t\t\t\tthrow 'ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE' if stop != start and (stop - start) * step < 0\n\t\t\t\ti = start - step\n\t\t\t\tif start < stop\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) > stop then i else nil\n\n\tprimes = LazyList -> do\n\t\tfilter((x) -> all((p) -> x % p != 0) takeWhile((p) -> p * p <= x) range(2, Infinity)) range(2, Infinity)\n\n\t# LazyList producers: lazy, enumerate, iterate, randoms, permutations,\n\n\tlazy = (xs) -> #make a LazyList from Function/LazyList/Array/String/ES6Lazy\n\t\tif typeof xs is 'function'\n\t\t\tif xs[Symbol.iterator]? #xs is LazyList\n\t\t\t\txs\n\t\t\telse #xs is Function\n\t\t\t\tLazyList xs\n\t\telse if xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif (++i) < xs.length then xs[i] else nil\n\t\telse if xs[Symbol.iterator]? #xs is ES6Lazy\n\t\t\tLazyList ->\n\t\t\t\tit = xs[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tr = it.next()\n\t\t\t\t\tif r.done then nil else r.value\n\t\telse\n\t\t\tthrow Error 'lazy(xs): xs is neither Array nor Iterable'\n\n\tenumerate = (it) -> # Iterator with index(with key for object)\n\t\tif it[Symbol.iterator]? or it instanceof Array\n\t\t\tzip(naturals, it)\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\tkeys = Object.keys(it)\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < keys.length then [(k = keys[i]), it[k]] else nil\n\n\trepeat = (x) -> # repeat x\n\t\tLazyList ->\n\t\t\tIterator ->\n\t\t\t\tx\n\n\titerate = (next, init) -> #function next should not change it's argument\n\t\tLazyList ->\n\t\t\tst = init\n\t\t\tIterator ->\n\t\t\t\tr = st\n\t\t\t\tst = next st\n\t\t\t\treturn r\n\n\trandoms = do -> #NOTE: unstandard!\n\t\tsalt = Math.PI / 3.0\n\n\t\thash = (x) ->\n\t\t\tx = Math.sin(x + salt) * 1e4\n\t\t\tx - Math.floor(x)\n\n\n\t\tnormal = (seed) -> iterate hash, hash(seed)\n\n\t\t(opts) ->\n\t\t\tif not opts?\n\t\t\t\tnormal(0)\n\t\t\telse if typeof opts is 'number'\n\t\t\t\tnormal(opts)\n\t\t\telse\n\t\t\t\tseed = opts.seed ? 0\n\t\t\t\trg = opts.range\n\t\t\t\tif rg?\n\t\t\t\t\tif typeof rg is 'number'\n\t\t\t\t\t\tmap((x) -> Math.floor(x * rg)) normal(seed)\n\t\t\t\t\telse\n\t\t\t\t\t\t[s, k] = [rg[0], rg[1] - rg[0] + 1]\n\t\t\t\t\t\tmap((x) -> s + Math.floor(x * k)) normal(seed)\n\t\t\t\telse\n\t\t\t\t\tnormal(seed)\n\n\tpermutations = do ->\n\t\tnext_permutation = (x) ->\n\t\t\tx = x[...]\n\t\t\tl = x.length - 1\n\t\t\t--l while l >= 1 and x[l] <= x[l - 1]\n\n\t\t\tif (l != 0)\n\t\t\t\tm = x.length - 1\n\t\t\t\t--m while m > l - 1 and x[m] <= x[l - 1]\n\t\t\t\t[x[m], x[l - 1]] = [x[l - 1], x[m]]\n\n\t\t\tr = x.length - 1\n\t\t\twhile(l < r)\n\t\t\t\t[x[l], x[r]] = [x[r], x[l]]\n\t\t\t\t++l\n\t\t\t\t--r\n\t\t\treturn x\n\n\t\t(xs) ->\n\t\t\tarr = list xs\n\t\t\tif arr.length == 0 then nil else\n\t\t\t\tcons(arr[...]) takeWhile((ls) -> json(ls) != json(arr)) drop(1) iterate(next_permutation, arr)\n\n\t# LazyList decorators: take, takeWhile, drop, dropWhile, cons, map, filter, scanl, streak, streak2, reverse, sort, sortOn\n\n\ttake = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tc = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++c < n then iter() else nil\n\n\ttakeWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil and ok(x) then x else nil\n\n\tdrop = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tfinished = false\n\t\t\t\t(finished or= (iter() is nil); break if finished) for i in [0...n]\n\t\t\t\tif finished then (-> nil) else iter\n\n\tdropWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tnull while ok(x = iter()) and x isnt nil\n\t\t\t\tIterator ->\n\t\t\t\t\t[prevx, x] = [x, iter()]\n\t\t\t\t\treturn prevx\n\n\tcons = (x) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = null\n\t\t\t\tIterator ->\n\t\t\t\t\tif iter is null\n\t\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\t\treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\treturn iter()\n\n\tmap = (f) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil then f(x) else nil\n\n\tfilter = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tnull while (x = iter()) isnt nil and not ok(x)\n\t\t\t\t\treturn x\n\n\tscanl = (f, r) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tgot = r\n\t\t\t\t\tr = if (x = iter()) isnt nil then f(r, x) else nil\n\t\t\t\t\treturn got\n\n\tstreak = (n) -> #NOTE: unstandard!\n\t\tif n < 1\n\t\t\tnil\n\t\telse\n\t\t\t(xs) ->\n\t\t\t\tdrop(n - 1) LazyList ->\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\tbuf = []\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\treturn nil if (x = iter()) is nil\n\t\t\t\t\t\tbuf.push(x)\n\t\t\t\t\t\tbuf.shift(1) if buf.length > n\n\t\t\t\t\t\treturn buf[...]\n\n\tstreak2 = (n) -> (xs) -> streak(n) concat [xs, take(n - 1) xs] #NOTE: unstandard!\n\n\treverse = (xs) ->\n\t\tif xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = xs.length\n\t\t\t\tIterator ->\n\t\t\t\t\tif (--i) >= 0 then xs[i] else nil\n\t\telse #NOTE: strict!\n\t\t\tlist(lazy(xs)).reverse()\n\n\tsort = (xs) -> #NOTE: strict!\n\t\tarr = list lazy(xs)\n\t\treturn arr.sort((a, b) -> (a > b) - (a < b))\n\n\tsortOn = (f) -> #NOTE: strict! # f :: (Comparable b) => a -> b\n\t\t(xs) ->\n\t\t\tarr = list lazy(xs)\n\t\t\treturn arr.sort((a, b) -> ((fa = f(a)) > (fb = f(b))) - (fa < fb))\n\n\t# LazyList spliters: partition, groupOn,\n\n\tgroupOn = (f) -> #NOTE: strict! # f :: (Hashable b) => a -> b\n\t\t(xs) ->\n\t\t\tmemo = {}\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = f(x)\n\t\t\t\tmemo[y] ?= []\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn (v for k, v of memo)\n\n\tpartition = (f) -> #NOTE: strict! # f :: a -> Bool\n\t\t(xs) ->\n\t\t\tmemo = [[], []]\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = !f(x) + 0\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn memo\n\n\t# LazyList combiners: concat, zip, zipWith, cartProd,\n\n\tconcat = (xss) ->\n\t\txss = filter((x) -> x.constructor not in [Array, String] or x.length > 0) xss #TODO: more precise\n\t\tLazyList ->\n\t\t\txs_iter = lazy(xss)[Symbol.iterator]()\n\t\t\txs = xs_iter()\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tIterator ->\n\t\t\t\tif (x = iter()) isnt nil\n\t\t\t\t\treturn x\n\t\t\t\telse if (xs = xs_iter()) isnt nil\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\treturn iter()\n\t\t\t\telse\n\t\t\t\t\treturn nil\n\n\t{zip, zipWith} = do ->\n\t\tfinished = (arr) ->\n\t\t\tfor x in arr\n\t\t\t\treturn true if x is nil\n\t\t\treturn false\n\n\t\tzip = (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn next\n\n\t\tzipWith = (f) -> (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn f(next...)\n\n\t\treturn {zip, zipWith}\n\n\tcartProd = do -> # cartesian product\n\t\tinc_vector = (limits) ->\n\t\t\tlen_minus_1 = limits.length - 1\n\t\t\t(vec) ->\n\t\t\t\ti = len_minus_1\n\t\t\t\tvec[i--] = 0 until ++vec[i] < limits[i] or i <= 0\n\t\t\t\treturn vec\n\n\t\tapply_vector = (space) ->\n\t\t\tlen = space.length\n\t\t\t(vec) ->\n\t\t\t\t(space[i][vec[i]] for i in [0...len])\n\n\t\t(xss...) ->\n\t\t\tLazyList ->\n\t\t\t\txss = (list(xs) for xs in xss)\n\t\t\t\tlimits = (xss[i].length for i in [0...xss.length])\n\t\t\t\t(return nil if len is 0) for len in limits\n\t\t\t\tinc = inc_vector(limits)\n\t\t\t\tget_value = apply_vector(xss)\n\t\t\t\tv = (0 for i in [0...xss.length])\n\t\t\t\tIterator ->\n\t\t\t\t\tif v[0] < limits[0] then (r = get_value v; inc v; r) else nil\n\n\t# LazyList consumers: list, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, foreach,\n\n\tlist = (xs) -> #force list elements of the LazyList to get an array\n\t\tif xs instanceof Array\n\t\t\txs\n\t\telse if typeof xs is 'function'\n\t\t\tit = xs[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if xs[Symbol.iterator]?\n\t\t\tit = lazy(xs)[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if typeof xs is 'number'\n\t\t\tn = xs\n\t\t\t(xs) -> list take(n) xs\n\t\telse\n\t\t\tthrow Error {\n\t\t\t\tmessage: 'list(xs): xs is neither Array nor Iterable'\n\t\t\t\tinfo:\n\t\t\t\t\t\"xs\": xs\n\t\t\t\t\t\"xs.constructor\": xs?.constructor\n\t\t\t}\n\n\thead = (xs) -> #returns error if xs is empty\n\t\tif xs.constructor in [Array, String]\n\t\t\tif xs.length > 0\n\t\t\t\treturn xs[0]\n\t\t\telse\n\t\t\t\tthrow \"Error: head() used on empty list.\"\n\t\telse\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tif (r = iter()) isnt nil\n\t\t\t\treturn r\n\t\t\telse\n\t\t\t\tthrow \"Error: head() used on empty list.\"\n\n\tlast = (xs) -> #returns nil if xs is empty\n\t\tif xs.constructor in [Array, String] then xs[xs.length - 1] ? nil else\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = nil\n\t\t\tr = x while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tlength = (xs) ->\n\t\tif xs.constructor in [Array, String] then xs.length else\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = 0\n\t\t\t++r while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tfoldl = (f, init) ->\n\t\t(xs) ->\n\t\t\tr = init\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = f(r, x) while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tbest = (better) -> #NOTE: unstandard!\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\treturn null if (r = iter()) is nil\n\t\t\twhile (it = iter()) isnt nil\n\t\t\t\tr = if better(it, r) then it else r\n\t\t\treturn r\n\n\tmaximumOn = (f) -> best((a, b) -> f(a) > f(b)) #NOTE: unstandard!\n\tminimumOn = (f) -> best((a, b) -> f(a) > f(b)) #NOTE: unstandard!\n\n\tmaximum = best((x, y) -> x > y)\n\tminimum = best((x, y) -> x < y)\n\n\tall = (f) ->\n\t\tf = ((x) -> x is f) if typeof(f) isnt 'function'\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\twhile (x = iter()) isnt nil\n\t\t\t\treturn false if not f(x)\n\t\t\treturn true\n\n\tany = (f) ->\n\t\tall_not = all (x) -> not f(x)\n\t\t(xs) -> not (all_not xs)\n\n\tfromList = (pairs) ->\n\t\tr = {}\n\t\tforeach pairs, ([k, v]) ->\n\t\t\tr[k] = v\n\t\treturn r\n\n\tbrk = -> brk\n\tbrk.toString = -> 'foreach.break'\n\n\tforeach = (xs, callback, fruit) ->\n\t\titer = lazy(xs)[Symbol.iterator]()\n\t\twhile (x = iter()) isnt nil\n\t\t\tbreak if callback(x, fruit) is brk\n\t\tfruit\n\n\tObject.defineProperties foreach,\n\t\tbreak:\n\t\t\twritable: false\n\t\t\tconfigurable: false\n\t\t\tenumerable: false\n\t\t\tvalue: brk\n\n\treturn {\n\t\t# LazyList definition\n\t\tnil, LazyList, Iterator, Symbol,\n\n\t\t# LazyList constants\n\t\tnaturals, range, primes,\n\n\t\t# LazyList producers\n\t\tlazy, enumerate, repeat, iterate, randoms, permutations,\n\n\t\t# LazyList decorators\n\t\tcons, map, filter, take, takeWhile, drop, dropWhile, scanl, streak, streak2, reverse, sort, sortOn,\n\n\t\t# LazyList spliters\n\t\tgroupOn, partition,\n\n\t\t# LazyList combiners\n\t\tconcat, zip, zipWith, cartProd,\n\n\t\t# LazyList consumers\n\t\tlist, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, fromList, foreach,\n\t}\n\nmodule.exports = this_module\n\tSymbol: Symbol ? {iterator: 'iter'}\n\n"]}