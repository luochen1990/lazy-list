{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/lazy.coffee","lazy.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","lazy","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"this_module","slice","arg","CustomErrorType","Iterator","LazyList","ListError","Symbol","all","any","best","brk","cartProd","concat","cons","drop","dropWhile","enumerate","filter","foldl","foreach","fromList","groupOn","head","iterate","last","list","map","maximum","maximumOn","minimum","minimumOn","naturals","nil","partition","permutations","powerset","primes","randoms","range","ref","repeat","reverse","scanl","sort","sortOn","streak","streak2","tail","take","takeWhile","zip","zipWith","errorName","msg","CustomError","name","__proto__","prototype","iterator","toString","toJSON","it","next","value","done","args","arguments","stop","start","step","x","p","Infinity","xs","constructor","Array","String","keys","Object","k","init","st","hash","normal","salt","Math","PI","sin","floor","seed","opts","ref1","rg","next_permutation","m","arr","ls","json","ss","c","iter","ok","finished","j","prevx","op","got","buf","push","shift","b","fa","fb","memo","v","y","results","xss","xs_iter","len1","iters","apply","apply_vector","inc_vector","limits","len_minus_1","vec","space","len","get_value","inc","results1","better","all_not","pairs","arg1","callback","fruit","defineProperties","break","writable","configurable","enumerable"],"mappings":"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","file":"lazy.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","this_module = ({Symbol}) ->\n\tCustomErrorType = (errorName) ->\n\t\t(msg) ->\n\t\t\tCustomError = (msg)->\n\t\t\t\tself = new Error msg\n\t\t\t\tself.name = errorName\n\t\t\t\tself.__proto__ = CustomError.prototype\n\t\t\t\treturn self\n\t\t\tCustomError.prototype.__proto__= Error.prototype\n\t\t\treturn new CustomError(msg)\n\n\tListError = CustomErrorType('ListError')\n\n\t# LazyList definition: nil, LazyList, Iterator,\n\n\tLazyList = (f) -> # construct a LazyList from a function.\n\t\tf[Symbol.iterator] = -> f()\n\t\tf.toString = -> \"LazyList\"\n\t\tf.toJSON = -> list f\n\t\treturn f\n\n\tnil = LazyList -> nil # xs is empty <==> xs is nil or xs() is nil or xs()() is nil... <==> last xs is nil\n\tnil.toString = -> 'nil'\n\n\tIterator = (it) -> # construct an Iterator(which is a function with status) from a function.\n\t\tit.next = ->\n\t\t\tr = it()\n\t\t\t{value: r, done: r == nil}\n\t\tit.toString = -> \"Iterator\"\n\t\treturn it\n\n\t# LazyList constants: naturals, range, primes,\n\n\tnaturals =\n\t\tLazyList ->\n\t\t\ti = -1\n\t\t\tIterator ->\n\t\t\t\t++i\n\n\trange = (args...) ->\n\t\tif args.length == 0\n\t\t\tnaturals\n\t\telse if args.length == 1\n\t\t\tLazyList ->\n\t\t\t\t[stop] = args\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < stop then i else nil\n\t\telse if args.length == 2\n\t\t\tLazyList ->\n\t\t\t\t[start, stop] = args\n\t\t\t\tif start < stop\n\t\t\t\t\ti = start - 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif ++i < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\ti = start + 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif --i > stop then i else nil\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\t[start, stop, step] = args\n\t\t\t\tthrow ListError 'ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE' if stop != start and (stop - start) * step < 0\n\t\t\t\ti = start - step\n\t\t\t\tif start < stop\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) > stop then i else nil\n\n\tprimes = LazyList -> do\n\t\tfilter((x) -> all((p) -> x % p != 0) takeWhile((p) -> p * p <= x) range(2, Infinity)) range(2, Infinity)\n\n\t# LazyList producers: lazy, enumerate, iterate, randoms, permutations, powerset\n\n\tlazy = (xs) -> #make a LazyList from Function/LazyList/Array/String/ES6Lazy\n\t\tif typeof xs is 'function'\n\t\t\tif xs[Symbol.iterator]? #xs is LazyList\n\t\t\t\txs\n\t\t\telse #xs is Function\n\t\t\t\tLazyList xs\n\t\telse if xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif (++i) < xs.length then xs[i] else nil\n\t\telse if xs[Symbol.iterator]? #xs is ES6Lazy\n\t\t\tLazyList ->\n\t\t\t\tit = xs[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tr = it.next()\n\t\t\t\t\tif r.done then nil else r.value\n\t\telse\n\t\t\tthrow ListError 'lazy(xs): xs is neither Array nor Iterable'\n\n\tenumerate = (it) -> # Iterator with index(with key for object)\n\t\tif it[Symbol.iterator]? or it instanceof Array\n\t\t\tzip(naturals, it)\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\tkeys = Object.keys(it)\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < keys.length then [(k = keys[i]), it[k]] else nil\n\n\trepeat = (x) -> # repeat x\n\t\tLazyList ->\n\t\t\tIterator ->\n\t\t\t\tx\n\n\titerate = (next, init) -> #function next should not change it's argument\n\t\tLazyList ->\n\t\t\tst = init\n\t\t\tIterator ->\n\t\t\t\tr = st\n\t\t\t\tst = next st\n\t\t\t\treturn r\n\n\trandoms = do -> #NOTE: unstandard!\n\t\tsalt = Math.PI / 3.0\n\n\t\thash = (x) ->\n\t\t\tx = Math.sin(x + salt) * 1e4\n\t\t\tx - Math.floor(x)\n\n\n\t\tnormal = (seed) -> iterate hash, hash(seed)\n\n\t\t(opts) ->\n\t\t\tif not opts?\n\t\t\t\tnormal(0)\n\t\t\telse if typeof opts is 'number'\n\t\t\t\tnormal(opts)\n\t\t\telse\n\t\t\t\tseed = opts.seed ? 0\n\t\t\t\trg = opts.range\n\t\t\t\tif rg?\n\t\t\t\t\tif typeof rg is 'number'\n\t\t\t\t\t\tmap((x) -> Math.floor(x * rg)) normal(seed)\n\t\t\t\t\telse\n\t\t\t\t\t\t[s, k] = [rg[0], rg[1] - rg[0] + 1]\n\t\t\t\t\t\tmap((x) -> s + Math.floor(x * k)) normal(seed)\n\t\t\t\telse\n\t\t\t\t\tnormal(seed)\n\n\tpermutations = do ->\n\t\tnext_permutation = (x) ->\n\t\t\tx = x[...]\n\t\t\tl = x.length - 1\n\t\t\t--l while l >= 1 and x[l] <= x[l - 1]\n\n\t\t\tif (l != 0)\n\t\t\t\tm = x.length - 1\n\t\t\t\t--m while m > l - 1 and x[m] <= x[l - 1]\n\t\t\t\t[x[m], x[l - 1]] = [x[l - 1], x[m]]\n\n\t\t\tr = x.length - 1\n\t\t\twhile(l < r)\n\t\t\t\t[x[l], x[r]] = [x[r], x[l]]\n\t\t\t\t++l\n\t\t\t\t--r\n\t\t\treturn x\n\n\t\t(xs) ->\n\t\t\tarr = list xs\n\t\t\tif arr.length == 0 then nil else\n\t\t\t\tcons(arr[...]) takeWhile((ls) -> json(ls) != json(arr)) drop(1) iterate(next_permutation, arr)\n\n\tpowerset = (xs) -> if length(xs) == 0 then [[]] else (ss = powerset(drop(1) xs); concat([ss, map(cons head(xs))(ss)]))\n\n\t# LazyList decorators: take, takeWhile, drop, dropWhile, cons, map, filter, scanl, streak, streak2, reverse, sort, sortOn\n\n\ttake = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tc = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++c < n then iter() else nil\n\n\ttakeWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil and ok(x) then x else nil\n\n\tdrop = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tfinished = false\n\t\t\t\t(finished or= (iter() is nil); break if finished) for i in [0...n]\n\t\t\t\tif finished then (-> nil) else iter\n\n\tdropWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tnull while ok(x = iter()) and x isnt nil\n\t\t\t\tIterator ->\n\t\t\t\t\t[prevx, x] = [x, iter()]\n\t\t\t\t\treturn prevx\n\n\tcons = (x) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = null\n\t\t\t\tIterator ->\n\t\t\t\t\tif iter is null\n\t\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\t\treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\treturn iter()\n\n\tmap = (f) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil then f(x) else nil\n\n\tfilter = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tnull while (x = iter()) isnt nil and not ok(x)\n\t\t\t\t\treturn x\n\n\tscanl = (op) -> (r) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tgot = r\n\t\t\t\t\tr = if (x = iter()) isnt nil then op(r)(x) else nil\n\t\t\t\t\treturn got\n\n\tstreak = (n) -> #NOTE: unstandard!\n\t\tif n < 1\n\t\t\tnil\n\t\telse\n\t\t\t(xs) ->\n\t\t\t\tdrop(n - 1) LazyList ->\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\tbuf = []\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\treturn nil if (x = iter()) is nil\n\t\t\t\t\t\tbuf.push(x)\n\t\t\t\t\t\tbuf.shift(1) if buf.length > n\n\t\t\t\t\t\treturn buf[...]\n\n\tstreak2 = (n) -> (xs) -> streak(n) concat [xs, take(n - 1) xs] #NOTE: unstandard!\n\n\treverse = (xs) ->\n\t\tif xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = xs.length\n\t\t\t\tIterator ->\n\t\t\t\t\tif (--i) >= 0 then xs[i] else nil\n\t\telse #NOTE: strict!\n\t\t\tlist(lazy(xs)).reverse()\n\n\tsort = (xs) -> #NOTE: strict!\n\t\tarr = list lazy(xs)\n\t\treturn arr.sort((a, b) -> (a > b) - (a < b))\n\n\tsortOn = (f) -> #NOTE: strict! # f :: (Comparable b) => a -> b\n\t\t(xs) ->\n\t\t\tarr = list lazy(xs)\n\t\t\treturn arr.sort((a, b) -> ((fa = f(a)) > (fb = f(b))) - (fa < fb))\n\n\t# LazyList spliters: partition, groupOn,\n\n\tgroupOn = (f) -> #NOTE: strict! # f :: (Hashable b) => a -> b\n\t\t(xs) ->\n\t\t\tmemo = {}\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = f(x)\n\t\t\t\tmemo[y] ?= []\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn (v for k, v of memo)\n\n\tpartition = (f) -> #NOTE: strict! # f :: a -> Bool\n\t\t(xs) ->\n\t\t\tmemo = [[], []]\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = !f(x) + 0\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn memo\n\n\t# LazyList combiners: concat, zip, zipWith, cartProd,\n\n\tconcat = (xss) ->\n\t\txss = filter((x) -> x.constructor not in [Array, String] or x.length > 0) xss #TODO: more precise\n\t\tLazyList ->\n\t\t\txs_iter = lazy(xss)[Symbol.iterator]()\n\t\t\txs = xs_iter()\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tIterator ->\n\t\t\t\tif (x = iter()) isnt nil\n\t\t\t\t\treturn x\n\t\t\t\telse if (xs = xs_iter()) isnt nil\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\treturn iter()\n\t\t\t\telse\n\t\t\t\t\treturn nil\n\n\t{zip, zipWith} = do ->\n\t\tfinished = (arr) ->\n\t\t\tfor x in arr\n\t\t\t\treturn true if x is nil\n\t\t\treturn false\n\n\t\tzip = (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn next\n\n\t\tzipWith = (f) -> (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn f(next...)\n\n\t\treturn {zip, zipWith}\n\n\tcartProd = do -> # cartesian product\n\t\tinc_vector = (limits) ->\n\t\t\tlen_minus_1 = limits.length - 1\n\t\t\t(vec) ->\n\t\t\t\ti = len_minus_1\n\t\t\t\tvec[i--] = 0 until ++vec[i] < limits[i] or i <= 0\n\t\t\t\treturn vec\n\n\t\tapply_vector = (space) ->\n\t\t\tlen = space.length\n\t\t\t(vec) ->\n\t\t\t\t(space[i][vec[i]] for i in [0...len])\n\n\t\t(xss...) ->\n\t\t\tLazyList ->\n\t\t\t\txss = (list(xs) for xs in xss)\n\t\t\t\tlimits = (xss[i].length for i in [0...xss.length])\n\t\t\t\t(return nil if len is 0) for len in limits\n\t\t\t\tinc = inc_vector(limits)\n\t\t\t\tget_value = apply_vector(xss)\n\t\t\t\tv = (0 for i in [0...xss.length])\n\t\t\t\tIterator ->\n\t\t\t\t\tif v[0] < limits[0] then (r = get_value v; inc v; r) else nil\n\n\t# LazyList consumers: list, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, foreach,\n\n\tlist = (xs) -> #force list elements of the LazyList to get an array\n\t\tif xs instanceof Array\n\t\t\txs\n\t\telse if typeof xs is 'function'\n\t\t\tit = xs[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if xs[Symbol.iterator]?\n\t\t\tit = lazy(xs)[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if typeof xs is 'number'\n\t\t\tn = xs\n\t\t\t(xs) -> list take(n) xs\n\t\telse\n\t\t\tthrow ListError 'list(xs): xs is neither Array nor Iterable'\n\n\thead = (xs) -> #returns error if xs is empty\n\t\tif xs.constructor in [Array, String]\n\t\t\tif xs.length > 0\n\t\t\t\treturn xs[0]\n\t\t\telse\n\t\t\t\tthrow ListError \"head() used on empty list.\"\n\t\telse\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tif (r = iter()) isnt nil\n\t\t\t\treturn r\n\t\t\telse\n\t\t\t\tthrow ListError \"head() used on empty list.\"\n\n\ttail = drop(1)\n\n\tlast = (xs) -> #returns error if xs is empty\n\t\tif xs.constructor in [Array, String]\n\t\t\tif xs.length > 0\n\t\t\t\treturn xs[xs.length - 1]\n\t\t\telse\n\t\t\t\tthrow ListError \"last() used on empty list.\"\n\t\telse\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = nil\n\t\t\tr = x while (x = iter()) isnt nil\n\t\t\tif r isnt nil\n\t\t\t\treturn r\n\t\t\telse\n\t\t\t\tthrow ListError \"last() used on empty list.\"\n\n\tlength = (xs) ->\n\t\tif xs.constructor in [Array, String] then xs.length else\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = 0\n\t\t\t++r while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tfoldl = (op) -> (init) ->\n\t\t(xs) ->\n\t\t\tr = init\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = op(r)(x) while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tbest = (better) -> #NOTE: unstandard!\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\treturn null if (r = iter()) is nil\n\t\t\twhile (it = iter()) isnt nil\n\t\t\t\tr = if better(it, r) then it else r\n\t\t\treturn r\n\n\tmaximumOn = (f) -> best((a, b) -> f(a) > f(b)) #NOTE: unstandard!\n\tminimumOn = (f) -> best((a, b) -> f(a) < f(b)) #NOTE: unstandard!\n\n\tmaximum = best((x, y) -> x > y)\n\tminimum = best((x, y) -> x < y)\n\n\tall = (f) ->\n\t\tf = ((x) -> x is f) if typeof(f) isnt 'function'\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\twhile (x = iter()) isnt nil\n\t\t\t\treturn false if not f(x)\n\t\t\treturn true\n\n\tany = (f) ->\n\t\tall_not = all (x) -> not f(x)\n\t\t(xs) -> not (all_not xs)\n\n\tfromList = (pairs) ->\n\t\tr = {}\n\t\tforeach pairs, ([k, v]) ->\n\t\t\tr[k] = v if v isnt undefined\n\t\treturn r\n\n\tbrk = -> brk\n\tbrk.toString = -> 'foreach.break'\n\n\tforeach = (xs, callback, fruit) ->\n\t\titer = lazy(xs)[Symbol.iterator]()\n\t\twhile (x = iter()) isnt nil\n\t\t\tbreak if callback(x, fruit) is brk\n\t\tfruit\n\n\tObject.defineProperties foreach,\n\t\tbreak:\n\t\t\twritable: false\n\t\t\tconfigurable: false\n\t\t\tenumerable: false\n\t\t\tvalue: brk\n\n\treturn {\n\t\t# LazyList definition\n\t\tnil, LazyList, Iterator, Symbol,\n\n\t\t# LazyList constants\n\t\tnaturals, range, primes,\n\n\t\t# LazyList producers\n\t\tlazy, enumerate, repeat, iterate, randoms, permutations, powerset,\n\n\t\t# LazyList decorators\n\t\tcons, map, filter, take, takeWhile, tail, drop, dropWhile, scanl, streak, streak2, reverse, sort, sortOn,\n\n\t\t# LazyList spliters\n\t\tgroupOn, partition,\n\n\t\t# LazyList combiners\n\t\tconcat, zip, zipWith, cartProd,\n\n\t\t# LazyList consumers\n\t\tlist, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, fromList, foreach,\n\t}\n\nmodule.exports = this_module\n\tSymbol: Symbol ? {iterator: 'iter'}\n\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.lazy = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar this_module,\n  slice = [].slice;\n\nthis_module = function(arg) {\n  var CustomErrorType, Iterator, LazyList, ListError, Symbol, all, any, best, brk, cartProd, concat, cons, drop, dropWhile, enumerate, filter, foldl, foreach, fromList, groupOn, head, iterate, last, lazy, length, list, map, maximum, maximumOn, minimum, minimumOn, naturals, nil, partition, permutations, powerset, primes, randoms, range, ref, repeat, reverse, scanl, sort, sortOn, streak, streak2, tail, take, takeWhile, zip, zipWith;\n  Symbol = arg.Symbol;\n  CustomErrorType = function(errorName) {\n    return function(msg) {\n      var CustomError;\n      CustomError = function(msg) {\n        var self;\n        self = new Error(msg);\n        self.name = errorName;\n        self.__proto__ = CustomError.prototype;\n        return self;\n      };\n      CustomError.prototype.__proto__ = Error.prototype;\n      return new CustomError(msg);\n    };\n  };\n  ListError = CustomErrorType('ListError');\n  LazyList = function(f) {\n    f[Symbol.iterator] = function() {\n      return f();\n    };\n    f.toString = function() {\n      return \"LazyList\";\n    };\n    f.toJSON = function() {\n      return list(f);\n    };\n    return f;\n  };\n  nil = LazyList(function() {\n    return nil;\n  });\n  nil.toString = function() {\n    return 'nil';\n  };\n  Iterator = function(it) {\n    it.next = function() {\n      var r;\n      r = it();\n      return {\n        value: r,\n        done: r === nil\n      };\n    };\n    it.toString = function() {\n      return \"Iterator\";\n    };\n    return it;\n  };\n  naturals = LazyList(function() {\n    var i;\n    i = -1;\n    return Iterator(function() {\n      return ++i;\n    });\n  });\n  range = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (args.length === 0) {\n      return naturals;\n    } else if (args.length === 1) {\n      return LazyList(function() {\n        var i, stop;\n        stop = args[0];\n        i = -1;\n        return Iterator(function() {\n          if (++i < stop) {\n            return i;\n          } else {\n            return nil;\n          }\n        });\n      });\n    } else if (args.length === 2) {\n      return LazyList(function() {\n        var i, start, stop;\n        start = args[0], stop = args[1];\n        if (start < stop) {\n          i = start - 1;\n          return Iterator(function() {\n            if (++i < stop) {\n              return i;\n            } else {\n              return nil;\n            }\n          });\n        } else {\n          i = start + 1;\n          return Iterator(function() {\n            if (--i > stop) {\n              return i;\n            } else {\n              return nil;\n            }\n          });\n        }\n      });\n    } else {\n      return LazyList(function() {\n        var i, start, step, stop;\n        start = args[0], stop = args[1], step = args[2];\n        if (stop !== start && (stop - start) * step < 0) {\n          throw ListError('ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE');\n        }\n        i = start - step;\n        if (start < stop) {\n          return Iterator(function() {\n            if ((i += step) < stop) {\n              return i;\n            } else {\n              return nil;\n            }\n          });\n        } else {\n          return Iterator(function() {\n            if ((i += step) > stop) {\n              return i;\n            } else {\n              return nil;\n            }\n          });\n        }\n      });\n    }\n  };\n  primes = LazyList(function() {\n    return filter(function(x) {\n      return all(function(p) {\n        return x % p !== 0;\n      })(takeWhile(function(p) {\n        return p * p <= x;\n      })(range(2, Infinity)));\n    })(range(2, Infinity))();\n  });\n  lazy = function(xs) {\n    var ref;\n    if (typeof xs === 'function') {\n      if (xs[Symbol.iterator] != null) {\n        return xs;\n      } else {\n        return LazyList(xs);\n      }\n    } else if ((ref = xs.constructor) === Array || ref === String) {\n      return LazyList(function() {\n        var i;\n        i = -1;\n        return Iterator(function() {\n          if ((++i) < xs.length) {\n            return xs[i];\n          } else {\n            return nil;\n          }\n        });\n      });\n    } else if (xs[Symbol.iterator] != null) {\n      return LazyList(function() {\n        var it;\n        it = xs[Symbol.iterator]();\n        return Iterator(function() {\n          var r;\n          r = it.next();\n          if (r.done) {\n            return nil;\n          } else {\n            return r.value;\n          }\n        });\n      });\n    } else {\n      throw ListError('lazy(xs): xs is neither Array nor Iterable');\n    }\n  };\n  enumerate = function(it) {\n    if ((it[Symbol.iterator] != null) || it instanceof Array) {\n      return zip(naturals, it);\n    } else {\n      return LazyList(function() {\n        var i, keys;\n        keys = Object.keys(it);\n        i = -1;\n        return Iterator(function() {\n          var k;\n          if (++i < keys.length) {\n            return [(k = keys[i]), it[k]];\n          } else {\n            return nil;\n          }\n        });\n      });\n    }\n  };\n  repeat = function(x) {\n    return LazyList(function() {\n      return Iterator(function() {\n        return x;\n      });\n    });\n  };\n  iterate = function(next, init) {\n    return LazyList(function() {\n      var st;\n      st = init;\n      return Iterator(function() {\n        var r;\n        r = st;\n        st = next(st);\n        return r;\n      });\n    });\n  };\n  randoms = (function() {\n    var hash, normal, salt;\n    salt = Math.PI / 3.0;\n    hash = function(x) {\n      x = Math.sin(x + salt) * 1e4;\n      return x - Math.floor(x);\n    };\n    normal = function(seed) {\n      return iterate(hash, hash(seed));\n    };\n    return function(opts) {\n      var k, ref, ref1, rg, s, seed;\n      if (opts == null) {\n        return normal(0);\n      } else if (typeof opts === 'number') {\n        return normal(opts);\n      } else {\n        seed = (ref = opts.seed) != null ? ref : 0;\n        rg = opts.range;\n        if (rg != null) {\n          if (typeof rg === 'number') {\n            return map(function(x) {\n              return Math.floor(x * rg);\n            })(normal(seed));\n          } else {\n            ref1 = [rg[0], rg[1] - rg[0] + 1], s = ref1[0], k = ref1[1];\n            return map(function(x) {\n              return s + Math.floor(x * k);\n            })(normal(seed));\n          }\n        } else {\n          return normal(seed);\n        }\n      }\n    };\n  })();\n  permutations = (function() {\n    var next_permutation;\n    next_permutation = function(x) {\n      var l, m, r, ref, ref1;\n      x = x.slice(0);\n      l = x.length - 1;\n      while (l >= 1 && x[l] <= x[l - 1]) {\n        --l;\n      }\n      if (l !== 0) {\n        m = x.length - 1;\n        while (m > l - 1 && x[m] <= x[l - 1]) {\n          --m;\n        }\n        ref = [x[l - 1], x[m]], x[m] = ref[0], x[l - 1] = ref[1];\n      }\n      r = x.length - 1;\n      while (l < r) {\n        ref1 = [x[r], x[l]], x[l] = ref1[0], x[r] = ref1[1];\n        ++l;\n        --r;\n      }\n      return x;\n    };\n    return function(xs) {\n      var arr;\n      arr = list(xs);\n      if (arr.length === 0) {\n        return nil;\n      } else {\n        return cons(arr.slice(0))(takeWhile(function(ls) {\n          return json(ls) !== json(arr);\n        })(drop(1)(iterate(next_permutation, arr))));\n      }\n    };\n  })();\n  powerset = function(xs) {\n    var ss;\n    if (length(xs) === 0) {\n      return [[]];\n    } else {\n      ss = powerset(drop(1)(xs));\n      return concat([ss, map(cons(head(xs)))(ss)]);\n    }\n  };\n  take = function(n) {\n    return function(xs) {\n      return LazyList(function() {\n        var c, iter;\n        iter = lazy(xs)[Symbol.iterator]();\n        c = -1;\n        return Iterator(function() {\n          if (++c < n) {\n            return iter();\n          } else {\n            return nil;\n          }\n        });\n      });\n    };\n  };\n  takeWhile = function(ok) {\n    return function(xs) {\n      return LazyList(function() {\n        var iter;\n        iter = lazy(xs)[Symbol.iterator]();\n        return Iterator(function() {\n          var x;\n          if ((x = iter()) !== nil && ok(x)) {\n            return x;\n          } else {\n            return nil;\n          }\n        });\n      });\n    };\n  };\n  drop = function(n) {\n    return function(xs) {\n      return LazyList(function() {\n        var finished, i, iter, j, ref;\n        iter = lazy(xs)[Symbol.iterator]();\n        finished = false;\n        for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n          finished || (finished = iter() === nil);\n          if (finished) {\n            break;\n          }\n        }\n        if (finished) {\n          return function() {\n            return nil;\n          };\n        } else {\n          return iter;\n        }\n      });\n    };\n  };\n  dropWhile = function(ok) {\n    return function(xs) {\n      return LazyList(function() {\n        var iter, x;\n        iter = lazy(xs)[Symbol.iterator]();\n        while (ok(x = iter()) && x !== nil) {\n          null;\n        }\n        return Iterator(function() {\n          var prevx, ref;\n          ref = [x, iter()], prevx = ref[0], x = ref[1];\n          return prevx;\n        });\n      });\n    };\n  };\n  cons = function(x) {\n    return function(xs) {\n      return LazyList(function() {\n        var iter;\n        iter = null;\n        return Iterator(function() {\n          if (iter === null) {\n            iter = lazy(xs)[Symbol.iterator]();\n            return x;\n          } else {\n            return iter();\n          }\n        });\n      });\n    };\n  };\n  map = function(f) {\n    return function(xs) {\n      return LazyList(function() {\n        var iter;\n        iter = lazy(xs)[Symbol.iterator]();\n        return Iterator(function() {\n          var x;\n          if ((x = iter()) !== nil) {\n            return f(x);\n          } else {\n            return nil;\n          }\n        });\n      });\n    };\n  };\n  filter = function(ok) {\n    return function(xs) {\n      return LazyList(function() {\n        var iter;\n        iter = lazy(xs)[Symbol.iterator]();\n        return Iterator(function() {\n          var x;\n          while ((x = iter()) !== nil && !ok(x)) {\n            null;\n          }\n          return x;\n        });\n      });\n    };\n  };\n  scanl = function(op) {\n    return function(r) {\n      return function(xs) {\n        return LazyList(function() {\n          var iter;\n          iter = lazy(xs)[Symbol.iterator]();\n          return Iterator(function() {\n            var got, x;\n            got = r;\n            r = (x = iter()) !== nil ? op(r)(x) : nil;\n            return got;\n          });\n        });\n      };\n    };\n  };\n  streak = function(n) {\n    if (n < 1) {\n      return nil;\n    } else {\n      return function(xs) {\n        return drop(n - 1)(LazyList(function() {\n          var buf, iter;\n          iter = lazy(xs)[Symbol.iterator]();\n          buf = [];\n          return Iterator(function() {\n            var x;\n            if ((x = iter()) === nil) {\n              return nil;\n            }\n            buf.push(x);\n            if (buf.length > n) {\n              buf.shift(1);\n            }\n            return buf.slice(0);\n          });\n        }));\n      };\n    }\n  };\n  streak2 = function(n) {\n    return function(xs) {\n      return streak(n)(concat([xs, take(n - 1)(xs)]));\n    };\n  };\n  reverse = function(xs) {\n    var ref;\n    if ((ref = xs.constructor) === Array || ref === String) {\n      return LazyList(function() {\n        var i;\n        i = xs.length;\n        return Iterator(function() {\n          if ((--i) >= 0) {\n            return xs[i];\n          } else {\n            return nil;\n          }\n        });\n      });\n    } else {\n      return list(lazy(xs)).reverse();\n    }\n  };\n  sort = function(xs) {\n    var arr;\n    arr = list(lazy(xs));\n    return arr.sort(function(a, b) {\n      return (a > b) - (a < b);\n    });\n  };\n  sortOn = function(f) {\n    return function(xs) {\n      var arr;\n      arr = list(lazy(xs));\n      return arr.sort(function(a, b) {\n        var fa, fb;\n        return ((fa = f(a)) > (fb = f(b))) - (fa < fb);\n      });\n    };\n  };\n  groupOn = function(f) {\n    return function(xs) {\n      var k, memo, v;\n      memo = {};\n      foreach(xs, function(x) {\n        var y;\n        y = f(x);\n        if (memo[y] == null) {\n          memo[y] = [];\n        }\n        return memo[y].push(x);\n      });\n      return (function() {\n        var results;\n        results = [];\n        for (k in memo) {\n          v = memo[k];\n          results.push(v);\n        }\n        return results;\n      })();\n    };\n  };\n  partition = function(f) {\n    return function(xs) {\n      var memo;\n      memo = [[], []];\n      foreach(xs, function(x) {\n        var y;\n        y = !f(x) + 0;\n        return memo[y].push(x);\n      });\n      return memo;\n    };\n  };\n  concat = function(xss) {\n    xss = filter(function(x) {\n      var ref;\n      return ((ref = x.constructor) !== Array && ref !== String) || x.length > 0;\n    })(xss);\n    return LazyList(function() {\n      var iter, xs, xs_iter;\n      xs_iter = lazy(xss)[Symbol.iterator]();\n      xs = xs_iter();\n      iter = lazy(xs)[Symbol.iterator]();\n      return Iterator(function() {\n        var x;\n        if ((x = iter()) !== nil) {\n          return x;\n        } else if ((xs = xs_iter()) !== nil) {\n          iter = lazy(xs)[Symbol.iterator]();\n          return iter();\n        } else {\n          return nil;\n        }\n      });\n    });\n  };\n  ref = (function() {\n    var finished, zip, zipWith;\n    finished = function(arr) {\n      var j, len1, x;\n      for (j = 0, len1 = arr.length; j < len1; j++) {\n        x = arr[j];\n        if (x === nil) {\n          return true;\n        }\n      }\n      return false;\n    };\n    zip = function() {\n      var xss;\n      xss = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return LazyList(function() {\n        var iters, xs;\n        iters = (function() {\n          var j, len1, results;\n          results = [];\n          for (j = 0, len1 = xss.length; j < len1; j++) {\n            xs = xss[j];\n            results.push(lazy(xs)[Symbol.iterator]());\n          }\n          return results;\n        })();\n        return Iterator(function() {\n          var iter, next;\n          next = (function() {\n            var j, len1, results;\n            results = [];\n            for (j = 0, len1 = iters.length; j < len1; j++) {\n              iter = iters[j];\n              results.push(iter());\n            }\n            return results;\n          })();\n          if (finished(next)) {\n            return nil;\n          } else {\n            return next;\n          }\n        });\n      });\n    };\n    zipWith = function(f) {\n      return function() {\n        var xss;\n        xss = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return LazyList(function() {\n          var iters, xs;\n          iters = (function() {\n            var j, len1, results;\n            results = [];\n            for (j = 0, len1 = xss.length; j < len1; j++) {\n              xs = xss[j];\n              results.push(lazy(xs)[Symbol.iterator]());\n            }\n            return results;\n          })();\n          return Iterator(function() {\n            var iter, next;\n            next = (function() {\n              var j, len1, results;\n              results = [];\n              for (j = 0, len1 = iters.length; j < len1; j++) {\n                iter = iters[j];\n                results.push(iter());\n              }\n              return results;\n            })();\n            if (finished(next)) {\n              return nil;\n            } else {\n              return f.apply(null, next);\n            }\n          });\n        });\n      };\n    };\n    return {\n      zip: zip,\n      zipWith: zipWith\n    };\n  })(), zip = ref.zip, zipWith = ref.zipWith;\n  cartProd = (function() {\n    var apply_vector, inc_vector;\n    inc_vector = function(limits) {\n      var len_minus_1;\n      len_minus_1 = limits.length - 1;\n      return function(vec) {\n        var i;\n        i = len_minus_1;\n        while (!(++vec[i] < limits[i] || i <= 0)) {\n          vec[i--] = 0;\n        }\n        return vec;\n      };\n    };\n    apply_vector = function(space) {\n      var len;\n      len = space.length;\n      return function(vec) {\n        var i, j, ref1, results;\n        results = [];\n        for (i = j = 0, ref1 = len; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n          results.push(space[i][vec[i]]);\n        }\n        return results;\n      };\n    };\n    return function() {\n      var xss;\n      xss = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return LazyList(function() {\n        var get_value, i, inc, j, len, len1, limits, v, xs;\n        xss = (function() {\n          var j, len1, results;\n          results = [];\n          for (j = 0, len1 = xss.length; j < len1; j++) {\n            xs = xss[j];\n            results.push(list(xs));\n          }\n          return results;\n        })();\n        limits = (function() {\n          var j, ref1, results;\n          results = [];\n          for (i = j = 0, ref1 = xss.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n            results.push(xss[i].length);\n          }\n          return results;\n        })();\n        for (j = 0, len1 = limits.length; j < len1; j++) {\n          len = limits[j];\n          if (len === 0) {\n            return nil;\n          }\n        }\n        inc = inc_vector(limits);\n        get_value = apply_vector(xss);\n        v = (function() {\n          var o, ref1, results;\n          results = [];\n          for (i = o = 0, ref1 = xss.length; 0 <= ref1 ? o < ref1 : o > ref1; i = 0 <= ref1 ? ++o : --o) {\n            results.push(0);\n          }\n          return results;\n        })();\n        return Iterator(function() {\n          var r;\n          if (v[0] < limits[0]) {\n            r = get_value(v);\n            inc(v);\n            return r;\n          } else {\n            return nil;\n          }\n        });\n      });\n    };\n  })();\n  list = function(xs) {\n    var it, n, results, results1, x;\n    if (xs instanceof Array) {\n      return xs;\n    } else if (typeof xs === 'function') {\n      it = xs[Symbol.iterator]();\n      results = [];\n      while ((x = it()) !== nil) {\n        results.push(x);\n      }\n      return results;\n    } else if (xs[Symbol.iterator] != null) {\n      it = lazy(xs)[Symbol.iterator]();\n      results1 = [];\n      while ((x = it()) !== nil) {\n        results1.push(x);\n      }\n      return results1;\n    } else if (typeof xs === 'number') {\n      n = xs;\n      return function(xs) {\n        return list(take(n)(xs));\n      };\n    } else {\n      throw ListError('list(xs): xs is neither Array nor Iterable');\n    }\n  };\n  head = function(xs) {\n    var iter, r, ref1;\n    if ((ref1 = xs.constructor) === Array || ref1 === String) {\n      if (xs.length > 0) {\n        return xs[0];\n      } else {\n        throw ListError(\"head() used on empty list.\");\n      }\n    } else {\n      iter = lazy(xs)[Symbol.iterator]();\n      if ((r = iter()) !== nil) {\n        return r;\n      } else {\n        throw ListError(\"head() used on empty list.\");\n      }\n    }\n  };\n  tail = drop(1);\n  last = function(xs) {\n    var iter, r, ref1, x;\n    if ((ref1 = xs.constructor) === Array || ref1 === String) {\n      if (xs.length > 0) {\n        return xs[xs.length - 1];\n      } else {\n        throw ListError(\"last() used on empty list.\");\n      }\n    } else {\n      iter = lazy(xs)[Symbol.iterator]();\n      r = nil;\n      while ((x = iter()) !== nil) {\n        r = x;\n      }\n      if (r !== nil) {\n        return r;\n      } else {\n        throw ListError(\"last() used on empty list.\");\n      }\n    }\n  };\n  length = function(xs) {\n    var iter, r, ref1, x;\n    if ((ref1 = xs.constructor) === Array || ref1 === String) {\n      return xs.length;\n    } else {\n      iter = lazy(xs)[Symbol.iterator]();\n      r = 0;\n      while ((x = iter()) !== nil) {\n        ++r;\n      }\n      return r;\n    }\n  };\n  foldl = function(op) {\n    return function(init) {\n      return function(xs) {\n        var iter, r, x;\n        r = init;\n        iter = lazy(xs)[Symbol.iterator]();\n        while ((x = iter()) !== nil) {\n          r = op(r)(x);\n        }\n        return r;\n      };\n    };\n  };\n  best = function(better) {\n    return function(xs) {\n      var it, iter, r;\n      iter = lazy(xs)[Symbol.iterator]();\n      if ((r = iter()) === nil) {\n        return null;\n      }\n      while ((it = iter()) !== nil) {\n        r = better(it, r) ? it : r;\n      }\n      return r;\n    };\n  };\n  maximumOn = function(f) {\n    return best(function(a, b) {\n      return f(a) > f(b);\n    });\n  };\n  minimumOn = function(f) {\n    return best(function(a, b) {\n      return f(a) < f(b);\n    });\n  };\n  maximum = best(function(x, y) {\n    return x > y;\n  });\n  minimum = best(function(x, y) {\n    return x < y;\n  });\n  all = function(f) {\n    if (typeof f !== 'function') {\n      f = (function(x) {\n        return x === f;\n      });\n    }\n    return function(xs) {\n      var iter, x;\n      iter = lazy(xs)[Symbol.iterator]();\n      while ((x = iter()) !== nil) {\n        if (!f(x)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  };\n  any = function(f) {\n    var all_not;\n    all_not = all(function(x) {\n      return !f(x);\n    });\n    return function(xs) {\n      return !(all_not(xs));\n    };\n  };\n  fromList = function(pairs) {\n    var r;\n    r = {};\n    foreach(pairs, function(arg1) {\n      var k, v;\n      k = arg1[0], v = arg1[1];\n      if (v !== void 0) {\n        return r[k] = v;\n      }\n    });\n    return r;\n  };\n  brk = function() {\n    return brk;\n  };\n  brk.toString = function() {\n    return 'foreach.break';\n  };\n  foreach = function(xs, callback, fruit) {\n    var iter, x;\n    iter = lazy(xs)[Symbol.iterator]();\n    while ((x = iter()) !== nil) {\n      if (callback(x, fruit) === brk) {\n        break;\n      }\n    }\n    return fruit;\n  };\n  Object.defineProperties(foreach, {\n    \"break\": {\n      writable: false,\n      configurable: false,\n      enumerable: false,\n      value: brk\n    }\n  });\n  return {\n    nil: nil,\n    LazyList: LazyList,\n    Iterator: Iterator,\n    Symbol: Symbol,\n    naturals: naturals,\n    range: range,\n    primes: primes,\n    lazy: lazy,\n    enumerate: enumerate,\n    repeat: repeat,\n    iterate: iterate,\n    randoms: randoms,\n    permutations: permutations,\n    powerset: powerset,\n    cons: cons,\n    map: map,\n    filter: filter,\n    take: take,\n    takeWhile: takeWhile,\n    tail: tail,\n    drop: drop,\n    dropWhile: dropWhile,\n    scanl: scanl,\n    streak: streak,\n    streak2: streak2,\n    reverse: reverse,\n    sort: sort,\n    sortOn: sortOn,\n    groupOn: groupOn,\n    partition: partition,\n    concat: concat,\n    zip: zip,\n    zipWith: zipWith,\n    cartProd: cartProd,\n    list: list,\n    head: head,\n    last: last,\n    length: length,\n    foldl: foldl,\n    best: best,\n    maximum: maximum,\n    minimum: minimum,\n    maximumOn: maximumOn,\n    minimumOn: minimumOn,\n    all: all,\n    any: any,\n    fromList: fromList,\n    foreach: foreach\n  };\n};\n\nmodule.exports = this_module({\n  Symbol: typeof Symbol !== \"undefined\" && Symbol !== null ? Symbol : {\n    iterator: 'iter'\n  }\n});\n\n\n},{}]},{},[1])(1)\n});\n\n//# sourceMappingURL=lazy.js.map\n"]}