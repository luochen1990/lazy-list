{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/lazy.coffee"],"names":[],"mappings":"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","file":"lazy.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","this_module = ({Symbol}) ->\n\tCustomErrorType = (errorName) ->\n\t\t(msg) ->\n\t\t\tCustomError = (msg)->\n\t\t\t\tself = new Error msg\n\t\t\t\tself.name = errorName\n\t\t\t\tself.__proto__ = CustomError.prototype\n\t\t\t\treturn self\n\t\t\tCustomError.prototype.__proto__= Error.prototype\n\t\t\treturn new CustomError(msg)\n\n\tListError = CustomErrorType('ListError')\n\n\t# LazyList definition: nil, LazyList, Iterator,\n\n\tLazyList = (f) -> # construct a LazyList from a function.\n\t\tf[Symbol.iterator] = -> f()\n\t\tf.toString = -> \"LazyList\"\n\t\tf.toJSON = -> list f\n\t\treturn f\n\n\tnil = LazyList -> nil # xs is empty <==> xs is nil or xs() is nil or xs()() is nil... <==> last xs is nil\n\tnil.toString = -> 'nil'\n\n\tIterator = (it) -> # construct an Iterator(which is a function with status) from a function.\n\t\tit.next = ->\n\t\t\tr = it()\n\t\t\t{value: r, done: r == nil}\n\t\tit.toString = -> \"Iterator\"\n\t\treturn it\n\n\t# LazyList constants: naturals, range, primes,\n\n\tnaturals =\n\t\tLazyList ->\n\t\t\ti = -1\n\t\t\tIterator ->\n\t\t\t\t++i\n\n\trange = (args...) ->\n\t\tif args.length == 0\n\t\t\tnaturals\n\t\telse if args.length == 1\n\t\t\tLazyList ->\n\t\t\t\t[stop] = args\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < stop then i else nil\n\t\telse if args.length == 2\n\t\t\tLazyList ->\n\t\t\t\t[start, stop] = args\n\t\t\t\tif start < stop\n\t\t\t\t\ti = start - 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif ++i < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\ti = start + 1\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif --i > stop then i else nil\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\t[start, stop, step] = args\n\t\t\t\tthrow ListError 'ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE' if stop != start and (stop - start) * step < 0\n\t\t\t\ti = start - step\n\t\t\t\tif start < stop\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\tif (i += step) > stop then i else nil\n\n\tprimes = LazyList -> do\n\t\tfilter((x) -> all((p) -> x % p != 0) takeWhile((p) -> p * p <= x) range(2, Infinity)) range(2, Infinity)\n\n\t# LazyList producers: lazy, enumerate, iterate, randoms, permutations, powerset\n\n\tlazy = (xs) -> #make a LazyList from Function/LazyList/Array/String/ES6Lazy\n\t\tif typeof xs is 'function'\n\t\t\tif xs[Symbol.iterator]? #xs is LazyList\n\t\t\t\txs\n\t\t\telse #xs is Function\n\t\t\t\tLazyList xs\n\t\telse if xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif (++i) < xs.length then xs[i] else nil\n\t\telse if xs[Symbol.iterator]? #xs is ES6Lazy\n\t\t\tLazyList ->\n\t\t\t\tit = xs[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tr = it.next()\n\t\t\t\t\tif r.done then nil else r.value\n\t\telse\n\t\t\tthrow ListError 'lazy(xs): xs is neither Array nor Iterable'\n\n\tenumerate = (it) -> # Iterator with index(with key for object)\n\t\tif it[Symbol.iterator]? or it instanceof Array\n\t\t\tzip(naturals, it)\n\t\telse\n\t\t\tLazyList ->\n\t\t\t\tkeys = Object.keys(it)\n\t\t\t\ti = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++i < keys.length then [(k = keys[i]), it[k]] else nil\n\n\trepeat = (x) -> # repeat x\n\t\tLazyList ->\n\t\t\tIterator ->\n\t\t\t\tx\n\n\titerate = (next, init) -> #function next should not change it's argument\n\t\tLazyList ->\n\t\t\tst = init\n\t\t\tIterator ->\n\t\t\t\tr = st\n\t\t\t\tst = next st\n\t\t\t\treturn r\n\n\trandoms = do -> #NOTE: unstandard!\n\t\tsalt = Math.PI / 3.0\n\n\t\thash = (x) ->\n\t\t\tx = Math.sin(x + salt) * 1e4\n\t\t\tx - Math.floor(x)\n\n\n\t\tnormal = (seed) -> iterate hash, hash(seed)\n\n\t\t(opts) ->\n\t\t\tif not opts?\n\t\t\t\tnormal(0)\n\t\t\telse if typeof opts is 'number'\n\t\t\t\tnormal(opts)\n\t\t\telse\n\t\t\t\tseed = opts.seed ? 0\n\t\t\t\trg = opts.range\n\t\t\t\tif rg?\n\t\t\t\t\tif typeof rg is 'number'\n\t\t\t\t\t\tmap((x) -> Math.floor(x * rg)) normal(seed)\n\t\t\t\t\telse\n\t\t\t\t\t\t[s, k] = [rg[0], rg[1] - rg[0] + 1]\n\t\t\t\t\t\tmap((x) -> s + Math.floor(x * k)) normal(seed)\n\t\t\t\telse\n\t\t\t\t\tnormal(seed)\n\n\tpermutations = do ->\n\t\tnext_permutation = (x) ->\n\t\t\tx = x[...]\n\t\t\tl = x.length - 1\n\t\t\t--l while l >= 1 and x[l] <= x[l - 1]\n\n\t\t\tif (l != 0)\n\t\t\t\tm = x.length - 1\n\t\t\t\t--m while m > l - 1 and x[m] <= x[l - 1]\n\t\t\t\t[x[m], x[l - 1]] = [x[l - 1], x[m]]\n\n\t\t\tr = x.length - 1\n\t\t\twhile(l < r)\n\t\t\t\t[x[l], x[r]] = [x[r], x[l]]\n\t\t\t\t++l\n\t\t\t\t--r\n\t\t\treturn x\n\n\t\t(xs) ->\n\t\t\tarr = list xs\n\t\t\tif arr.length == 0 then nil else\n\t\t\t\tcons(arr[...]) takeWhile((ls) -> json(ls) != json(arr)) drop(1) iterate(next_permutation, arr)\n\n\tpowerset = (xs) -> if length(xs) == 0 then [[]] else (ss = powerset(drop(1) xs); concat([ss, map(cons head(xs))(ss)]))\n\n\t# LazyList decorators: take, takeWhile, drop, dropWhile, cons, map, filter, scanl, streak, streak2, reverse, sort, sortOn\n\n\ttake = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tc = -1\n\t\t\t\tIterator ->\n\t\t\t\t\tif ++c < n then iter() else nil\n\n\ttakeWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil and ok(x) then x else nil\n\n\tdrop = (n) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tfinished = false\n\t\t\t\t(finished or= (iter() is nil); break if finished) for i in [0...n]\n\t\t\t\tif finished then (-> nil) else iter\n\n\tdropWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tnull while ok(x = iter()) and x isnt nil\n\t\t\t\tIterator ->\n\t\t\t\t\t[prevx, x] = [x, iter()]\n\t\t\t\t\treturn prevx\n\n\tcons = (x) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = null\n\t\t\t\tIterator ->\n\t\t\t\t\tif iter is null\n\t\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\t\treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\treturn iter()\n\n\tmap = (f) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tif (x = iter()) isnt nil then f(x) else nil\n\n\tfilter = (ok) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tnull while (x = iter()) isnt nil and not ok(x)\n\t\t\t\t\treturn x\n\n\tscanl = (op) -> (r) ->\n\t\t(xs) ->\n\t\t\tLazyList ->\n\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\tIterator ->\n\t\t\t\t\tgot = r\n\t\t\t\t\tr = if (x = iter()) isnt nil then op(r)(x) else nil\n\t\t\t\t\treturn got\n\n\tstreak = (n) -> #NOTE: unstandard!\n\t\tif n < 1\n\t\t\tnil\n\t\telse\n\t\t\t(xs) ->\n\t\t\t\tdrop(n - 1) LazyList ->\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\tbuf = []\n\t\t\t\t\tIterator ->\n\t\t\t\t\t\treturn nil if (x = iter()) is nil\n\t\t\t\t\t\tbuf.push(x)\n\t\t\t\t\t\tbuf.shift(1) if buf.length > n\n\t\t\t\t\t\treturn buf[...]\n\n\tstreak2 = (n) -> (xs) -> streak(n) concat [xs, take(n - 1) xs] #NOTE: unstandard!\n\n\treverse = (xs) ->\n\t\tif xs.constructor in [Array, String] #xs is Array or String\n\t\t\tLazyList ->\n\t\t\t\ti = xs.length\n\t\t\t\tIterator ->\n\t\t\t\t\tif (--i) >= 0 then xs[i] else nil\n\t\telse #NOTE: strict!\n\t\t\tlist(lazy(xs)).reverse()\n\n\tsort = (xs) -> #NOTE: strict!\n\t\tarr = list lazy(xs)\n\t\treturn arr.sort((a, b) -> (a > b) - (a < b))\n\n\tsortOn = (f) -> #NOTE: strict! # f :: (Comparable b) => a -> b\n\t\t(xs) ->\n\t\t\tarr = list lazy(xs)\n\t\t\treturn arr.sort((a, b) -> ((fa = f(a)) > (fb = f(b))) - (fa < fb))\n\n\t# LazyList spliters: partition, groupOn,\n\n\tgroupOn = (f) -> #NOTE: strict! # f :: (Hashable b) => a -> b\n\t\t(xs) ->\n\t\t\tmemo = {}\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = f(x)\n\t\t\t\tmemo[y] ?= []\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn (v for k, v of memo)\n\n\tpartition = (f) -> #NOTE: strict! # f :: a -> Bool\n\t\t(xs) ->\n\t\t\tmemo = [[], []]\n\t\t\tforeach xs, (x) ->\n\t\t\t\ty = !f(x) + 0\n\t\t\t\tmemo[y].push(x)\n\t\t\treturn memo\n\n\t# LazyList combiners: concat, zip, zipWith, cartProd,\n\n\tconcat = (xss) ->\n\t\txss = filter((x) -> x.constructor not in [Array, String] or x.length > 0) xss #TODO: more precise\n\t\tLazyList ->\n\t\t\txs_iter = lazy(xss)[Symbol.iterator]()\n\t\t\txs = xs_iter()\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tIterator ->\n\t\t\t\tif (x = iter()) isnt nil\n\t\t\t\t\treturn x\n\t\t\t\telse if (xs = xs_iter()) isnt nil\n\t\t\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\t\t\treturn iter()\n\t\t\t\telse\n\t\t\t\t\treturn nil\n\n\t{zip, zipWith} = do ->\n\t\tfinished = (arr) ->\n\t\t\tfor x in arr\n\t\t\t\treturn true if x is nil\n\t\t\treturn false\n\n\t\tzip = (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn next\n\n\t\tzipWith = (f) -> (xss...) ->\n\t\t\tLazyList ->\n\t\t\t\titers = (lazy(xs)[Symbol.iterator]() for xs in xss)\n\t\t\t\tIterator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn f(next...)\n\n\t\treturn {zip, zipWith}\n\n\tcartProd = do -> # cartesian product\n\t\tinc_vector = (limits) ->\n\t\t\tlen_minus_1 = limits.length - 1\n\t\t\t(vec) ->\n\t\t\t\ti = len_minus_1\n\t\t\t\tvec[i--] = 0 until ++vec[i] < limits[i] or i <= 0\n\t\t\t\treturn vec\n\n\t\tapply_vector = (space) ->\n\t\t\tlen = space.length\n\t\t\t(vec) ->\n\t\t\t\t(space[i][vec[i]] for i in [0...len])\n\n\t\t(xss...) ->\n\t\t\tLazyList ->\n\t\t\t\txss = (list(xs) for xs in xss)\n\t\t\t\tlimits = (xss[i].length for i in [0...xss.length])\n\t\t\t\t(return nil if len is 0) for len in limits\n\t\t\t\tinc = inc_vector(limits)\n\t\t\t\tget_value = apply_vector(xss)\n\t\t\t\tv = (0 for i in [0...xss.length])\n\t\t\t\tIterator ->\n\t\t\t\t\tif v[0] < limits[0] then (r = get_value v; inc v; r) else nil\n\n\t# LazyList consumers: list, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, foreach,\n\n\tlist = (xs) -> #force list elements of the LazyList to get an array\n\t\tif xs instanceof Array\n\t\t\txs\n\t\telse if typeof xs is 'function'\n\t\t\tit = xs[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if xs[Symbol.iterator]?\n\t\t\tit = lazy(xs)[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if typeof xs is 'number'\n\t\t\tn = xs\n\t\t\t(xs) -> list take(n) xs\n\t\telse\n\t\t\tthrow ListError 'list(xs): xs is neither Array nor Iterable'\n\n\thead = (xs) -> #returns error if xs is empty\n\t\tif xs.constructor in [Array, String]\n\t\t\tif xs.length > 0\n\t\t\t\treturn xs[0]\n\t\t\telse\n\t\t\t\tthrow ListError \"head() used on empty list.\"\n\t\telse\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tif (r = iter()) isnt nil\n\t\t\t\treturn r\n\t\t\telse\n\t\t\t\tthrow ListError \"head() used on empty list.\"\n\n\ttail = drop(1)\n\n\tlast = (xs) -> #returns error if xs is empty\n\t\tif xs.constructor in [Array, String]\n\t\t\tif xs.length > 0\n\t\t\t\treturn xs[xs.length - 1]\n\t\t\telse\n\t\t\t\tthrow ListError \"last() used on empty list.\"\n\t\telse\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = nil\n\t\t\tr = x while (x = iter()) isnt nil\n\t\t\tif r isnt nil\n\t\t\t\treturn r\n\t\t\telse\n\t\t\t\tthrow ListError \"last() used on empty list.\"\n\n\tlength = (xs) ->\n\t\tif xs.constructor in [Array, String] then xs.length else\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = 0\n\t\t\t++r while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tfoldl = (op) -> (init) ->\n\t\t(xs) ->\n\t\t\tr = init\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\tr = op(r)(x) while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tbest = (better) -> #NOTE: unstandard!\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\treturn null if (r = iter()) is nil\n\t\t\twhile (it = iter()) isnt nil\n\t\t\t\tr = if better(it, r) then it else r\n\t\t\treturn r\n\n\tmaximumOn = (f) -> best((a, b) -> f(a) > f(b)) #NOTE: unstandard!\n\tminimumOn = (f) -> best((a, b) -> f(a) < f(b)) #NOTE: unstandard!\n\n\tmaximum = best((x, y) -> x > y)\n\tminimum = best((x, y) -> x < y)\n\n\tall = (f) ->\n\t\tf = ((x) -> x is f) if typeof(f) isnt 'function'\n\t\t(xs) ->\n\t\t\titer = lazy(xs)[Symbol.iterator]()\n\t\t\twhile (x = iter()) isnt nil\n\t\t\t\treturn false if not f(x)\n\t\t\treturn true\n\n\tany = (f) ->\n\t\tall_not = all (x) -> not f(x)\n\t\t(xs) -> not (all_not xs)\n\n\tfromList = (pairs) ->\n\t\tr = {}\n\t\tforeach pairs, ([k, v]) ->\n\t\t\tr[k] = v if v isnt undefined\n\t\treturn r\n\n\tbrk = -> brk\n\tbrk.toString = -> 'foreach.break'\n\n\tforeach = (xs, callback, fruit) ->\n\t\titer = lazy(xs)[Symbol.iterator]()\n\t\twhile (x = iter()) isnt nil\n\t\t\tbreak if callback(x, fruit) is brk\n\t\tfruit\n\n\tObject.defineProperties foreach,\n\t\tbreak:\n\t\t\twritable: false\n\t\t\tconfigurable: false\n\t\t\tenumerable: false\n\t\t\tvalue: brk\n\n\treturn {\n\t\t# LazyList definition\n\t\tnil, LazyList, Iterator, Symbol,\n\n\t\t# LazyList constants\n\t\tnaturals, range, primes,\n\n\t\t# LazyList producers\n\t\tlazy, enumerate, repeat, iterate, randoms, permutations, powerset,\n\n\t\t# LazyList decorators\n\t\tcons, map, filter, take, takeWhile, tail, drop, dropWhile, scanl, streak, streak2, reverse, sort, sortOn,\n\n\t\t# LazyList spliters\n\t\tgroupOn, partition,\n\n\t\t# LazyList combiners\n\t\tconcat, zip, zipWith, cartProd,\n\n\t\t# LazyList consumers\n\t\tlist, head, last, length, foldl, best, maximum, minimum, maximumOn, minimumOn, all, any, fromList, foreach,\n\t}\n\nmodule.exports = this_module\n\tSymbol: Symbol ? {iterator: 'iter'}\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}