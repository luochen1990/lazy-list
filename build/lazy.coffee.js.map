{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","lazy.coffee","lazy.coffee.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","this_module","slice","arg","Symbol","all","any","best","brk","cartProd","concat","cons","drop","dropWhile","enumerate","filter","foldl","foreach","generate","iterator","last","lazy","lazylist","list","map","naturals","nil","permutation_gen","primes","random_gen","range","ranged_random_gen","ref","repeat","reverse","scanl","streak","take","takeWhile","zip","zipWith","toString","it","next","value","done","args","arguments","stop","start","step","x","p","Infinity","arr","Array","keys","Object","k","init","status","hash","Math","sin","floor","opts","seed","random","next_permutation","m","ref1","ls","json","xs","c","iter","ok","finished","j","prevx","got","buf","push","shift","copy","xss","current_index","len1","iters","results","apply","apply_vector","inc_vector","limits","len_minus_1","vec","space","len","get_value","inc","v","results1","better","all_not","callback","fruit","defineProperties","break","writable","configurable","enumerable"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,GCAA,GAAAC,GAAAC,KAAAA,KAAAD,GAAc,SAACE,GAId,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxB,EAAAyB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAwWA,OA5WepC,GAADD,EAACC,OAIfkB,EAAW,SAAC9B,GAGX,MAFAA,GAAEY,EAAOe,UAAY,WCIjB,MDJoB3B,MACxBA,EAAEiD,SAAW,WCMT,MDNY,YACTjD,GAERkC,EAAMJ,EAAS,WCQZ,MDReI,KAClBA,EAAIe,SAAW,WCUZ,MDVe,OAElBtB,EAAW,SAACuB,GAKX,MAJAA,GAAGC,KAAO,WACT,GAAA1D,ECYG,ODZHA,GAAIyD,KACHE,MAAO3D,EAAG4D,KAAM5D,IAAKyC,IACvBgB,EAAGD,SAAW,WCgBV,MDhBa,YACVC,GAIRjB,EACCH,EAAS,WACR,GAAA/B,ECgBC,ODhBDA,GAAI,GACJ4B,EAAS,WCgBN,QDfF5B,MAEHuC,EAAQ,WACP,GAAAgB,EAAA,OADQA,GAAA,GAAAC,UAAAjD,OAAAI,EAAAL,KAAAkD,UAAA,MACU,IAAfD,EAAKhD,OACP2B,EAEAH,EADsB,IAAfwB,EAAKhD,OACH,WACR,GAAAP,GAAAyD,CCqBI,ODrBHA,GAAQF,EAAA,GACTvD,EAAI,GACJ4B,EAAS,WACR,QAAG5B,EAAMyD,EAAUzD,EAAOmC,KACN,IAAfoB,EAAKhD,OACH,WACR,GAAAP,GAAA0D,EAAAD,CACA,OADCC,GAAAH,EAAA,GAAOE,EAAAF,EAAA,GACGE,EAARC,GACF1D,EAAI0D,EAAQ,EACZ9B,EAAS,WACR,QAAG5B,EAAMyD,EAAUzD,EAAOmC,MAE3BnC,EAAI0D,EAAQ,EACZ9B,EAAS,WACR,QAAG5B,EAAMyD,EAAUzD,EAAOmC,MAEpB,WACR,GAAAnC,GAAA0D,EAAAC,EAAAF,CACA,IADCC,EAAAH,EAAA,GAAOE,EAAAF,EAAA,GAAMI,EAAAJ,EAAA,GACkDE,IAAQC,GAAkC,GAAvBD,EAAOC,GAASC,EAAnG,KAAM,sDAEN,OADA3D,GAAI0D,EAAQC,EAEX/B,EADU6B,EAARC,EACO,WACR,OAAI1D,GAAK2D,GAAQF,EAAUzD,EAAOmC,GAE1B,WACR,OAAInC,GAAK2D,GAAQF,EAAUzD,EAAOmC,OAEvCE,EAASN,EAAS,WCuDf,MDtDFP,GAAO,SAACoC,GCuDJ,MDvDU9C,GAAI,SAAC+C,GCwDb,MDxDmBD,GAAIC,IAAK,IAAGd,EAAU,SAACc,GC0D1C,MD1DyDD,IAATC,EAAIA,IAAQtB,EAAM,EAAGuB,SAAWvB,EAAM,EAAGuB,UAIhGhC,EAAO,SAACiC,GACP,MACChC,GADgB,kBAAdgC,GACOA,EACF,MAAAA,EAAAlD,EAAAe,UACE,WACR,GAAAuB,EC4DI,OD5DJA,GAAKY,EAAIlD,EAAOe,YAChBA,EAAS,WACR,GAAAlC,EACA,OADAA,GAAIyD,EAAGC,OACJ1D,EAAE4D,KAAUnB,EAASzC,EAAE2D,SAEnB,WACR,GAAArD,ECoEI,ODpEJA,GAAI,GACJ4B,EAAS,WAER,MADA5B,IAAK,EACFA,EAAI+D,EAAIxD,OACVwD,EAAI/D,GAEJmC,OAELZ,EAAY,SAAC4B,GACZ,MAAG,OAAAA,EAAAtC,EAAAe,WAAwBuB,YAAca,OACxChB,EAAId,EAAUiB,GAEdpB,EAAS,WACR,GAAA/B,GAAAiE,CC0EI,OD1EJA,GAAOC,OAAOD,KAAKd,GACnBnD,EAAI,GACJ4B,EAAS,WACR,GAAAuC,EAAA,SAAGnE,EAAMiE,EAAK1D,QAAc4D,EAAIF,EAAKjE,GAAKmD,EAAGgB,IAAShC,OAE1DO,EAAS,SAACkB,GCiFP,MDhFF7B,GAAS,WCiFL,MDhFHH,GAAS,WCiFJ,MDhFJgC,QAEHjC,EAAW,SAACyC,EAAMhB,GCmFf,MDlFFrB,GAAS,WACR,GAAAsC,ECoFG,ODpFHA,GAASD,EACTxC,EAAS,WACR,GAAAC,EAEA,OAFAA,GAAOwC,EACPA,EAASjB,EAAKiB,GACPxC,OAEVS,EAAgB,WACf,GAAAgC,EC2FE,OD3FFA,GAAO,SAACV,GCyFJ,MDxFHA,GAAkB,IAAdW,KAAKC,IAAIZ,GACbA,EAAIW,KAAKE,MAAMb,IAChB,SAACc,GACA,GAAAjC,GAAAkC,CC0FG,OD1FHA,GAAOL,EAAA,OAAA7B,EAAA,MAAAiC,EAAAA,EAAAC,KAAA,QAAAlC,EAAkB8B,KAAKK,UAC9BjD,EAASgD,EAAML,OAEjB9B,EAAoB,SAACD,EAAOmC,GAC3B,GAAAjC,GAAAkC,CC4FE,OD5FFA,GAAA,OAAAlC,EAAA,MAAAiC,EAAAA,EAAAC,KAAA,QAAAlC,EAAoB8B,KAAKK,SACzB3C,EAAI,SAAC2B,GC4FD,MD5FOW,MAAKE,MAAMb,EAAIrB,KAAQD,GAAWqC,KAAMA,MAEpDvC,EAAqB,WACpB,GAAAyC,ECsHE,ODtHFA,GAAmB,SAACjB,GACnB,GAAAxD,GAAA0E,EAAApF,EAAA+C,EAAAsC,CAEI,KAFJnB,EAAIA,EAAEjD,MAAA,GACNP,EAAIwD,EAAErD,OAAS,EACLH,GAAK,GAAMwD,EAAExD,IAAMwD,EAAExD,EAAI,MAAnCA,CAEA,IAAS,IAALA,EAAJ,CAEK,IADJ0E,EAAIlB,EAAErD,OAAS,EACLuE,EAAI1E,EAAI,GAAMwD,EAAEkB,IAAMlB,EAAExD,EAAI,MAAtC0E,CACArC,IAAoBmB,EAAExD,EAAI,GAAIwD,EAAEkB,IAA/BlB,EAAEkB,GAAArC,EAAA,GAAImB,EAAExD,EAAI,GAAJqC,EAAA,GAGV,IADA/C,EAAIkE,EAAErD,OAAS,EACLb,EAAJU,GACL2E,GAAgBnB,EAAElE,GAAIkE,EAAExD,IAAvBwD,EAAExD,GAAA2E,EAAA,GAAInB,EAAElE,GAAAqF,EAAA,KACT3E,IACAV,CACD,OAAOkE,IAER,SAACG,GACA,MAAiB,KAAdA,EAAIxD,OAAiB4B,EACvBhB,GAAQ4C,EAAIpD,MAAA,IAAOoC,EAAU,SAACiC,GCwGxB,MDxG+BC,MAAKD,KAAOC,KAAKlB,KAAM1C,EAAK,GAAGM,EAASoC,EAAKc,UAIrF/B,EAAO,SAACrD,GC0GL,MDzGF,UAACyF,GC0GG,MDzGHnD,GAAS,WACR,GAAAoD,GAAAC,CC4GI,OD5GJA,IAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjEuD,EAAI,GACJvD,EAAS,WACR,QAAGuD,EAAM1F,EAAO2F,IAAYjD,QAEhCY,EAAY,SAACsC,GCkHV,MDjHF,UAACH,GCkHG,MDjHHnD,GAAS,WACR,GAAAqD,ECmHI,ODnHJA,IAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjEA,EAAS,WACR,GAAAgC,EAAA,QAAIA,EAAIwB,OAAajD,GAAQkD,EAAGzB,GAAQA,EAAOzB,QAEnDd,EAAO,SAAC5B,GC2HL,MD1HF,UAACyF,GC2HG,MD1HHnD,GAAS,WACR,GAAAuD,GAAAtF,EAAAoF,EAAAG,EAAA9C,CAEA,KAFA2C,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjE0D,GAAW,EACgDtF,EAAAuF,EAAA,EAAA9C,EAAAhD,GAAAgD,GAAA,EAAAA,EAAA8C,EAAAA,EAAA9C,KAA1D6C,IAAAA,EAAcF,MAAUjD,IAAemD,GAAmBtF,EAAAyC,GAAA,IAAA8C,IAAAA,GAC3D,MAAGD,GAAe,WCkIV,MDlIanD,IAAUiD,MAElC9D,EAAY,SAAC+D,GCyIV,MDxIF,UAACH,GCyIG,MDxIHnD,GAAS,WACR,GAAAqD,GAAAxB,CACK,KADLwB,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACtDyD,EAAGzB,EAAIwB,MAAYxB,IAAOzB,IC4IjC,MD3IJP,GAAS,WACR,GAAA4D,GAAA/C,CACA,OADAA,IAAcmB,EAAGwB,KAAhBI,EAAA/C,EAAA,GAAOmB,EAAAnB,EAAA,GACD+C,QAEXpE,EAAO,SAACwC,GCgJL,MD/IF,UAACsB,GCgJG,MD/IHnD,GAAS,WACR,GAAAqD,ECiJI,ODjJJA,GAAO,KACPxD,EAAS,WACR,MAAW,QAARwD,GACFA,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YAC1DgC,GAEAwB,UAEZnD,EAAM,SAAChC,GCqJJ,MDpJF,UAACiF,GCqJG,MDpJHnD,GAAS,WACR,GAAAqD,ECsJI,ODtJJA,IAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjEA,EAAS,WACR,GAAAgC,EAAA,QAAIA,EAAIwB,OAAajD,EAASlC,EAAE2D,GAAQzB,QAE5CX,EAAS,SAAC6D,GC8JP,MD7JF,UAACH,GC8JG,MD7JHnD,GAAS,WACR,GAAAqD,EC+JI,OD/JJA,IAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjEA,EAAS,WACH,IAAL,GAAAgC,IAAWyB,EAAOzB,EAAIwB,MAAYxB,IAAOzB,IACzC,MAAOyB,SAEXhB,EAAQ,SAAC3C,EAAGP,GCqKT,MDpKF,UAACwF,GCqKG,MDpKHnD,GAAS,WACR,GAAAqD,ECsKI,ODtKJA,IAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjEA,EAAS,WACR,GAAA6D,GAAA7B,CAEA,OAFA6B,GAAM/F,EACNA,GAAQkE,EAAIwB,OAAajD,EAASlC,EAAEP,EAAGkE,GAAQzB,EACxCsD,QAEX5C,EAAS,SAACpD,GC0KP,MDzKF,UAACyF,GC0KG,MDzKHnD,GAAS,WACR,GAAA2D,GAAAN,CC4KI,OD5KJA,IAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjE8D,KACA9D,EAAS,WACR,GAAAgC,EAAA,QAAeA,EAAIwB,OAAWjD,EAAvBA,GACPuD,EAAIC,KAAK/B,GACO8B,EAAInF,OAASd,GAA7BiG,EAAIE,MAAM,GACHF,EAAI/E,MAAA,UAEfgC,EAAU,SAACuC,GACV,GAAAnB,EACA,OADAA,GAAsB,kBAAbmB,GAA6BlD,EAAKkD,GAAQW,KAAKX,GACjDpD,EAAKiC,EAAIpB,YAIjBxB,EAAS,WACR,GAAA2E,ECmLE,ODpLOA,GAAA,GAAAtC,UAAAjD,OAAAI,EAAAL,KAAAkD,UAAA,MACTzB,EAAS,WACR,GAAAgE,GAAAX,CCsLG,ODtLHA,IAAW,MAAAU,EAAA,GAAAjF,EAAAe,UAA8BkE,EAAI,GAAQhE,EAAKgE,EAAI,KAAKjF,EAAOe,YAC1EmE,EAAgB,EAChBnE,EAAS,WACR,GAAAgC,EAAA,QAAIA,EAAIwB,OAAajD,EACbyB,IACCmC,EAAkBD,EAAIvF,QAC9B6E,GAAW,MAAAU,EAAAC,GAAAlF,EAAAe,UAA0CkE,EAAIC,GAAoBjE,EAAKgE,EAAIC,KAAiBlF,EAAOe,eAGvGO,OAEXM,EAAoB,WACnB,GAAA6C,GAAAtC,EAAAC,CAyBA,OAzBAqC,GAAW,SAACvB,GACX,GAAAwB,GAAAS,EAAApC,CAAA,KAAA2B,EAAA,EAAAS,EAAAjC,EAAAxD,OAAAyF,EAAAT,EAAAA,IACC,GC0LI3B,EAAIG,EAAIwB,GD1LG3B,IAAKzB,EAApB,OAAO,CACR,QAAO,GAERa,EAAM,WACL,GAAA8C,ECgMG,ODjMGA,GAAA,GAAAtC,UAAAjD,OAAAI,EAAAL,KAAAkD,UAAA,MACNzB,EAAS,WACR,GAAAkE,GAAAf,CC0MI,OD1MJe,GAAA,WCkMM,GAAIV,GAAGS,EAAME,CAEb,KDpMGA,KAAAX,EAAA,EAAAS,EAAAF,EAAAvF,OAAAyF,EAAAT,EAAAA,ICqMDL,EAAKY,EAAIP,GDrMRW,EAAAP,MAAiB,kBAAbT,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YCwM7D,OAAOsE,MDvMbtE,EAAS,WACR,GAAAwD,GAAAhC,CACA,OADAA,GAAA,WC2MO,GAAImC,GAAGS,EAAME,CAEb,KD7MCA,KAAAX,EAAA,EAAAS,EAAAC,EAAA1F,OAAAyF,EAAAT,EAAAA,IC8MCH,EAAOa,EAAMV,GD9MdW,EAAAP,KAAAP,ICiND,OAAOc,MDhNXZ,EAASlC,GACJjB,EAEAiB,OAEXH,EAAU,SAAChD,GCsNP,MDtNa,YAChB,GAAA6F,ECwNK,ODzNYA,GAAA,GAAAtC,UAAAjD,OAAAI,EAAAL,KAAAkD,UAAA,MACjBzB,EAAS,WACR,GAAAkE,GAAAf,CCkOM,ODlONe,GAAA,WC0NQ,GAAIV,GAAGS,EAAME,CAEb,KD5NCA,KAAAX,EAAA,EAAAS,EAAAF,EAAAvF,OAAAyF,EAAAT,EAAAA,IC6NCL,EAAKY,EAAIP,GD7NVW,EAAAP,MAAiB,kBAAbT,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YCgO3D,OAAOsE,MD/NftE,EAAS,WACR,GAAAwD,GAAAhC,CACA,OADAA,GAAA,WCmOS,GAAImC,GAAGS,EAAME,CAEb,KDrODA,KAAAX,EAAA,EAAAS,EAAAC,EAAA1F,OAAAyF,EAAAT,EAAAA,ICsOGH,EAAOa,EAAMV,GDtOhBW,EAAAP,KAAAP,ICyOC,OAAOc,MDxObZ,EAASlC,GACJjB,EAEAlC,EAAAkG,MAAA,KAAE/C,UAELJ,IAAAA,EAAKC,QAAAA,MA1BbD,EAAAP,EAAAO,IAAKC,EAAAR,EAAAQ,QA4BN/B,EAAc,WACb,GAAAkF,GAAAC,CC0QE,OD1QFA,GAAa,SAACC,GACb,GAAAC,ECoPG,ODpPHA,GAAcD,EAAO/F,OAAS,EAC9B,SAACiG,GACA,GAAAxG,EACa,KADbA,EAAIuG,MACeC,EAAMxG,GAAKsG,EAAOtG,IAAW,GAALA,IAA3CwG,EAAIxG,KAAO,CACX,OAAOwG,KAETJ,EAAe,SAACK,GACf,GAAAC,ECyPG,ODzPHA,GAAMD,EAAMlG,OACZ,SAACiG,GACA,GAAAxG,GAAAuF,EAAAR,EAAAmB,CC0PI,KD1PHA,KAA0BlG,EAAAuF,EAAA,EAAAR,EAAA2B,EAAA3B,GAAA,EAAAA,EAAAQ,EAAAA,EAAAR,EAAA/E,EAAA+E,GAAA,IAAAQ,IAAAA,EAA1BW,EAAAP,KAAAc,EAAMzG,GAAGwG,EAAIxG,IC6PV,OAAOkG,KD3Pb,WACC,GAAAJ,ECgQG,ODjQHA,GAAA,GAAAtC,UAAAjD,OAAAI,EAAAL,KAAAkD,UAAA,MACAzB,EAAS,WACR,GAAA4E,GAAA3G,EAAA4G,EAAArB,EAAAmB,EAAAV,EAAAM,EAAAO,EAAA3B,CAEA,KAFAY,EAAA,WCkQM,GAAIP,GAAGS,EAAME,CAEb,KDpQCA,KAAAX,EAAA,EAAAS,EAAAF,EAAAvF,OAAAyF,EAAAT,EAAAA,ICqQCL,EAAKY,EAAIP,GDrQVW,EAAAP,KAAA3D,EAAKkD,GCwQN,OAAOgB,MDvQbI,EAAA,WC0QM,GAAIf,GAAGR,EAAMmB,CAEb,KD5QIA,KAAuBlG,EAAAuF,EAAA,EAAAR,EAAAe,EAAAvF,OAAAwE,GAAA,EAAAA,EAAAQ,EAAAA,EAAAR,EAAA/E,EAAA+E,GAAA,IAAAQ,IAAAA,EAAvBW,EAAAP,KAAAG,EAAI9F,GAAGO,OC+QX,OAAO2F,MD9QbX,EAAA,EAAAS,EAAAM,EAAA/F,OAAAyF,EAAAT,EAAAA,IAAC,GCiRKmB,EAAMJ,EAAOf,GDjRG,IAAPmB,EAAd,MAAOvE,ECgSJ,OD/RJyE,GAAMP,EAAWC,GACjBK,EAAYP,EAAaN,GACzBe,EAAA,WCsRM,GAAIjH,GAAGmF,EAAMmB,CAEb,KDxRDA,KAAWlG,EAAAJ,EAAA,EAAAmF,EAAAe,EAAAvF,OAAAwE,GAAA,EAAAA,EAAAnF,EAAAA,EAAAmF,EAAA/E,EAAA+E,GAAA,IAAAnF,IAAAA,EAAXsG,EAAAP,KAAA,EC2RC,OAAOO,MD1RbtE,EAAS,WACR,GAAAlC,EAAA,OAAGmH,GAAE,GAAKP,EAAO,IAAS5G,EAAIiH,EAAUE,GAAGD,EAAIC,GAAGnH,GAAQyC,UAI9DH,EAAO,SAACkD,GACP,GAAA/B,GAAA1D,EAAAyG,EAAAY,EAAAlD,CAAA,IAAgB,gBAAbsB,GCuSC,MDtSHzF,GAAIyF,EACJ,SAACA,GCsSI,MDtSGlD,GAAKc,EAAKrD,GAAGyF,IACjB,IAAgB,kBAAbA,GAAH,CC0SD,IDzSH/B,EAAK+B,EAAGrE,EAAOe,YACZsE,MAAOtC,EAAIT,OAAWhB,GAAxB+D,EAAAP,KAAA/B,EC2SE,OAAOsC,GD1SN,GAAG,MAAAhB,EAAArE,EAAAe,UAAH,CC8SD,ID7SHuB,EAAKrB,EAAKoD,GAAIrE,EAAOe,YAClBkF,MAAOlD,EAAIT,OAAWhB,GAAxB2E,EAAAnB,KAAA/B,EC+SE,OAAOkD,GD9SN,GAAG5B,YAAclB,OCgTlB,MD/SHkB,EAEA,MAAMhF,OAAM,+CAEd2B,EAAO,SAACqD,GACP,GAAAE,GAAA1F,EAAAqF,EAAAnB,CAAA,IAAO,MAAAsB,EAAArE,EAAAe,UCkTH,MAAqC,QAA7BmD,EAAOG,EAAGA,EAAG3E,OAAS,IAAcwE,EDlTK5C,CAG9C,KAFNiD,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjElC,EAAIyC,GACSyB,EAAIwB,OAAajD,GAA9BzC,EAAIkE,CACJ,OAAOlE,IAETa,EAAS,SAAC2E,GACT,GAAAE,GAAA1F,EAAAkE,CAAA,IAAO,MAAAsB,EAAArE,EAAAe,UCwTH,MDxT6BsD,GAAG3E,MAG/B,KAFJ6E,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,YACjElC,EAAI,GACOkE,EAAIwB,OAAajD,KAA5BzC,CACA,OAAOA,IAET+B,EAAQ,SAACxB,EAAGP,GC6TT,MD5TF,UAACwF,GACA,GAAAE,GAAAxB,CACY,KADZwB,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,aAC9CgC,EAAIwB,OAAajD,GAApCzC,EAAIO,EAAEP,EAAGkE,EACT,OAAOlE,KAETsB,EAAO,SAAC+F,GCiUL,MDhUF,UAAC7B,GACA,GAAA/B,GAAAiC,EAAA1F,CACA,IADA0F,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,aACjDlC,EAAI0F,OAAWjD,EAA/B,MAAO,KACP,OAAOgB,EAAKiC,OAAajD,GACxBzC,EAAOqH,EAAO5D,EAAIzD,GAAQyD,EAAQzD,CACnC,OAAOA,KAEToB,EAAM,SAACb,GC2UJ,MD1UoC,kBAAfA,KAAvBA,EAAI,SAAE2D,GCuUA,MDvUMA,KAAK3D,IACjB,SAACiF,GACA,GAAAE,GAAAxB,CACA,KADAwB,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,aAC1DgC,EAAIwB,OAAajD,GACvB,IAAgBlC,EAAM2D,GAAtB,OAAO,CACR,QAAO,IAET7C,EAAM,SAACd,GACN,GAAA+G,ECkVE,ODlVFA,GAAUlG,EAAI,SAAC8C,GCgVX,ODhViB3D,EAAM2D,KAC3B,SAACsB,GCkVG,ODlVS8B,EAAQ9B,KAEtBjE,EAAM,WCoVH,MDpVMA,IACTA,EAAIiC,SAAW,WCsVZ,MDtVe,iBAElBxB,EAAU,SAACwD,EAAI+B,EAAUC,GACxB,GAAA9B,GAAAxB,CACA,KADAwB,GAAwB,kBAAbF,GAA6BA,EAAQpD,EAAKoD,IAAKrE,EAAOe,aAC1DgC,EAAIwB,OAAajD,GACd8E,EAASrD,EAAGsD,KAAUjG,IC2V9B,MD1VFiG,IAEDhD,OAAOiD,iBAAiBzF,GACvB0F,SACCC,UAAU,EACVC,cAAc,EACdC,YAAY,EACZlE,MAAOpC,MAIRkB,IAAAA,EAAKJ,SAAAA,EAAUH,SAAAA,EAAUf,OAAAA,EAGzBqB,SAAAA,EAAUK,MAAAA,EAAOF,OAAAA,EAGjBP,KAAAA,EAAMP,UAAAA,EAAWmB,OAAAA,EAAQf,SAAAA,EAAUW,WAAAA,EAAYE,kBAAAA,EAAmBJ,gBAAAA,EAGlEhB,KAAAA,EAAMa,IAAAA,EAAKT,OAAAA,EAAQsB,KAAAA,EAAMC,UAAAA,EAAW1B,KAAAA,EAAMC,UAAAA,EAAWsB,MAAAA,EAAOC,OAAAA,EAAQF,QAAAA,EAGpExB,OAAAA,EAAQ6B,IAAAA,EAAKC,QAAAA,EAAS/B,SAAAA,EAGtBc,KAAAA,EAAMH,KAAAA,EAAMtB,OAAAA,EAAQkB,MAAAA,EAAOT,KAAAA,EAAMF,IAAAA,EAAKC,IAAAA,EAAKW,QAAAA,IA7X7CjB,EAgYOJ,QAAUK,GAChBG,OAAA,mBAAAA,SAAA,OAAAA,OAAQA,QAAUe,SAAU,oBCsXlB","file":"lazy.coffee.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","this_module = ({Symbol}) ->\n\n\t# LazyList definition: nil, lazylist, iterator,\n\n\tlazylist = (f) -> # construct a lazylist from a function.\n\t\tf[Symbol.iterator] = -> f()\n\t\tf.toString = -> \"LazyList\"\n\t\treturn f\n\n\tnil = lazylist -> nil # xs is empty <==> xs is nil or xs() is nil or xs()() is nil... <==> last xs is nil\n\tnil.toString = -> 'nil'\n\n\titerator = (it) -> # construct an iterator(which is a function with status) from a function.\n\t\tit.next = ->\n\t\t\tr = it()\n\t\t\t{value: r, done: r == nil}\n\t\tit.toString = -> \"Iterator\"\n\t\treturn it\n\n\t# lazylist constants: naturals, range, primes,\n\n\tnaturals =\n\t\tlazylist ->\n\t\t\ti = -1\n\t\t\titerator ->\n\t\t\t\t++i\n\n\trange = (args...) ->\n\t\tif args.length == 0\n\t\t\tnaturals\n\t\telse if args.length == 1\n\t\t\tlazylist ->\n\t\t\t\t[stop] = args\n\t\t\t\ti = -1\n\t\t\t\titerator ->\n\t\t\t\t\tif ++i < stop then i else nil\n\t\telse if args.length == 2\n\t\t\tlazylist ->\n\t\t\t\t[start, stop] = args\n\t\t\t\tif start < stop\n\t\t\t\t\ti = start - 1\n\t\t\t\t\titerator ->\n\t\t\t\t\t\tif ++i < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\ti = start + 1\n\t\t\t\t\titerator ->\n\t\t\t\t\t\tif --i > stop then i else nil\n\t\telse\n\t\t\tlazylist ->\n\t\t\t\t[start, stop, step] = args\n\t\t\t\tthrow 'ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE' if stop != start and (stop - start) * step < 0\n\t\t\t\ti = start - step\n\t\t\t\tif start < stop\n\t\t\t\t\titerator ->\n\t\t\t\t\t\tif (i += step) < stop then i else nil\n\t\t\t\telse\n\t\t\t\t\titerator ->\n\t\t\t\t\t\tif (i += step) > stop then i else nil\n\n\tprimes = lazylist -> do\n\t\tfilter((x) -> all((p) -> x % p != 0) takeWhile((p) -> p * p <= x) range(2, Infinity)) range(2, Infinity)\n\n\t# lazylist producers: lazy, enumerate, generate, random_gen, ranged_random_gen, permutation_gen,\n\n\tlazy = (arr) -> #make a lazylist from array or function\n\t\tif typeof arr is 'function'\n\t\t\tlazylist arr\n\t\telse if arr[Symbol.iterator]?\n\t\t\tlazylist ->\n\t\t\t\tit = arr[Symbol.iterator]()\n\t\t\t\titerator ->\n\t\t\t\t\tr = it.next()\n\t\t\t\t\tif r.done then nil else r.value\n\t\telse #maybe Array or String\n\t\t\tlazylist ->\n\t\t\t\ti = -1\n\t\t\t\titerator ->\n\t\t\t\t\ti += 1\n\t\t\t\t\tif i < arr.length\n\t\t\t\t\t\tarr[i]\n\t\t\t\t\telse\n\t\t\t\t\t\tnil\n\n\tenumerate = (it) -> # iterator with index(with key for object)\n\t\tif it[Symbol.iterator]? or it instanceof Array\n\t\t\tzip(naturals, it)\n\t\telse\n\t\t\tlazylist ->\n\t\t\t\tkeys = Object.keys(it)\n\t\t\t\ti = -1\n\t\t\t\titerator ->\n\t\t\t\t\tif ++i < keys.length then [(k = keys[i]), it[k]] else nil\n\n\trepeat = (x) -> # repeat x\n\t\tlazylist ->\n\t\t\titerator ->\n\t\t\t\tx\n\n\tgenerate = (init, next) -> #function next should not change it's argument\n\t\tlazylist ->\n\t\t\tstatus = init\n\t\t\titerator ->\n\t\t\t\tlast = status\n\t\t\t\tstatus = next status\n\t\t\t\treturn last\n\n\trandom_gen = do ->\n\t\thash = (x) ->\n\t\t\tx = Math.sin(x) * 1e4\n\t\t\tx - Math.floor(x)\n\t\t(opts) ->\n\t\t\tseed = hash(opts?.seed ? Math.random())\n\t\t\tgenerate seed, hash\n\n\tranged_random_gen = (range, opts) ->\n\t\tseed = opts?.seed ? Math.random()\n\t\tmap((x) -> Math.floor(x * range)) random_gen(seed: seed)\n\n\tpermutation_gen = do ->\n\t\tnext_permutation = (x) ->\n\t\t\tx = x[...]\n\t\t\tl = x.length - 1\n\t\t\t--l while l >= 1 and x[l] <= x[l - 1]\n\n\t\t\tif (l != 0)\n\t\t\t\tm = x.length - 1\n\t\t\t\t--m while m > l - 1 and x[m] <= x[l - 1]\n\t\t\t\t[x[m], x[l - 1]] = [x[l - 1], x[m]]\n\n\t\t\tr = x.length - 1\n\t\t\twhile(l < r)\n\t\t\t\t[x[l], x[r]] = [x[r], x[l]]\n\t\t\t\t++l\n\t\t\t\t--r\n\t\t\treturn x\n\n\t\t(arr) ->\n\t\t\tif arr.length == 0 then nil else\n\t\t\t\tconcat [arr[...]], takeWhile((ls) -> json(ls) != json(arr)) drop(1) generate arr, next_permutation\n\n\t# lazylist decorators: take, takeWhile, drop, dropWhile, cons, map, filter, scanl, streak, reverse,\n\n\ttake = (n) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\tc = -1\n\t\t\t\titerator ->\n\t\t\t\t\tif ++c < n then iter() else nil\n\n\ttakeWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\titerator ->\n\t\t\t\t\tif (x = iter()) isnt nil and ok(x) then x else nil\n\n\tdrop = (n) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\tfinished = false\n\t\t\t\t(finished or= (iter() is nil); break if finished) for i in [0...n]\n\t\t\t\tif finished then (-> nil) else iter\n\n\tdropWhile = (ok) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\tnull while ok(x = iter()) and x isnt nil\n\t\t\t\titerator ->\n\t\t\t\t\t[prevx, x] = [x, iter()]\n\t\t\t\t\treturn prevx\n\n\tcons = (x) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = null\n\t\t\t\titerator ->\n\t\t\t\t\tif iter is null\n\t\t\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\t\t\treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\treturn iter()\n\n\tmap = (f) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\titerator ->\n\t\t\t\t\tif (x = iter()) isnt nil then f(x) else nil\n\n\tfilter = (ok) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\titerator ->\n\t\t\t\t\tnull while not ok(x = iter()) and x isnt nil\n\t\t\t\t\treturn x\n\n\tscanl = (f, r) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\titerator ->\n\t\t\t\t\tgot = r\n\t\t\t\t\tr = if (x = iter()) isnt nil then f(r, x) else nil\n\t\t\t\t\treturn got\n\n\tstreak = (n) ->\n\t\t(xs) ->\n\t\t\tlazylist ->\n\t\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\t\tbuf = []\n\t\t\t\titerator ->\n\t\t\t\t\treturn nil if (x = iter()) is nil\n\t\t\t\t\tbuf.push(x)\n\t\t\t\t\tbuf.shift(1) if buf.length > n\n\t\t\t\t\treturn buf[...]\n\n\treverse = (xs) ->\n\t\tarr = if typeof xs is 'function' then list xs else copy xs\n\t\treturn lazy arr.reverse()\n\n\t# lazylist combiners: concat, zip, zipWith, cartProd,\n\n\tconcat = (xss...) ->\n\t\tlazylist ->\n\t\t\titer = (if xss[0][Symbol.iterator]? then xss[0] else lazy(xss[0]))[Symbol.iterator]()\n\t\t\tcurrent_index = 0\n\t\t\titerator ->\n\t\t\t\tif (x = iter()) isnt nil\n\t\t\t\t\treturn x\n\t\t\t\telse if (++current_index < xss.length)\n\t\t\t\t\titer = (if xss[current_index][Symbol.iterator]? then xss[current_index] else lazy(xss[current_index]))[Symbol.iterator]()\n\t\t\t\t\treturn iter()\n\t\t\t\telse\n\t\t\t\t\treturn nil\n\n\t{zip, zipWith} = do ->\n\t\tfinished = (arr) ->\n\t\t\tfor x in arr\n\t\t\t\treturn true if x is nil\n\t\t\treturn false\n\n\t\tzip = (xss...) ->\n\t\t\tlazylist ->\n\t\t\t\titers = ((if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]() for xs in xss)\n\t\t\t\titerator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn next\n\n\t\tzipWith = (f) -> (xss...) ->\n\t\t\tlazylist ->\n\t\t\t\titers = ((if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]() for xs in xss)\n\t\t\t\titerator ->\n\t\t\t\t\tnext = (iter() for iter in iters)\n\t\t\t\t\tif finished(next)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\telse\n\t\t\t\t\t\treturn f(next...)\n\n\t\treturn {zip, zipWith}\n\n\tcartProd = do -> # cartesian product\n\t\tinc_vector = (limits) ->\n\t\t\tlen_minus_1 = limits.length - 1\n\t\t\t(vec) ->\n\t\t\t\ti = len_minus_1\n\t\t\t\tvec[i--] = 0 until ++vec[i] < limits[i] or i <= 0\n\t\t\t\treturn vec\n\n\t\tapply_vector = (space) ->\n\t\t\tlen = space.length\n\t\t\t(vec) ->\n\t\t\t\t(space[i][vec[i]] for i in [0...len])\n\n\t\t(xss...) ->\n\t\t\tlazylist ->\n\t\t\t\txss = (list(xs) for xs in xss)\n\t\t\t\tlimits = (xss[i].length for i in [0...xss.length])\n\t\t\t\t(return nil if len is 0) for len in limits\n\t\t\t\tinc = inc_vector(limits)\n\t\t\t\tget_value = apply_vector(xss)\n\t\t\t\tv = (0 for i in [0...xss.length])\n\t\t\t\titerator ->\n\t\t\t\t\tif v[0] < limits[0] then (r = get_value v; inc v; r) else nil\n\n\t# lazylist consumers: list, last, length, foldl, best, all, any, foreach,\n\n\tlist = (xs) -> #force list elements of the lazylist to get an array\n\t\tif typeof xs is 'number'\n\t\t\tn = xs\n\t\t\t(xs) -> list take(n) xs\n\t\telse if typeof xs is 'function'\n\t\t\tit = xs[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if xs[Symbol.iterator]?\n\t\t\tit = lazy(xs)[Symbol.iterator]()\n\t\t\t(x while (x = it()) isnt nil)\n\t\telse if xs instanceof Array\n\t\t\txs\n\t\telse\n\t\t\tthrow Error 'list(xs): xs is neither LazyList nor Array'\n\n\tlast = (xs) -> #returns nil if xs is empty\n\t\tif not xs[Symbol.iterator]? then xs[xs.length - 1] ? nil else\n\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\tr = nil\n\t\t\tr = x while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tlength = (xs) ->\n\t\tif not xs[Symbol.iterator]? then xs.length else\n\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\tr = 0\n\t\t\t++r while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tfoldl = (f, r) ->\n\t\t(xs) ->\n\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\tr = f(r, x) while (x = iter()) isnt nil\n\t\t\treturn r\n\n\tbest = (better) ->\n\t\t(xs) ->\n\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\treturn null if (r = iter()) is nil\n\t\t\twhile (it = iter()) isnt nil\n\t\t\t\tr = if better(it, r) then it else r\n\t\t\treturn r\n\n\tall = (f) ->\n\t\tf = ((x) -> x is f) if typeof(f) isnt 'function'\n\t\t(xs) ->\n\t\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\t\twhile (x = iter()) isnt nil\n\t\t\t\treturn false if not f(x)\n\t\t\treturn true\n\n\tany = (f) ->\n\t\tall_not = all (x) -> not f(x)\n\t\t(xs) -> not (all_not xs)\n\n\tbrk = -> brk\n\tbrk.toString = -> 'foreach.break'\n\n\tforeach = (xs, callback, fruit) ->\n\t\titer = (if typeof xs is 'function' then xs else lazy(xs))[Symbol.iterator]()\n\t\twhile (x = iter()) isnt nil\n\t\t\tbreak if callback(x, fruit) is brk\n\t\tfruit\n\n\tObject.defineProperties foreach,\n\t\tbreak:\n\t\t\twritable: false\n\t\t\tconfigurable: false\n\t\t\tenumerable: false\n\t\t\tvalue: brk\n\n\treturn {\n\t\t# lazylist definition\n\t\tnil, lazylist, iterator, Symbol,\n\n\t\t# lazylist constants\n\t\tnaturals, range, primes,\n\n\t\t# lazylist producers\n\t\tlazy, enumerate, repeat, generate, random_gen, ranged_random_gen, permutation_gen,\n\n\t\t# lazylist decorators\n\t\tcons, map, filter, take, takeWhile, drop, dropWhile, scanl, streak, reverse,\n\n\t\t# lazylist combiners\n\t\tconcat, zip, zipWith, cartProd,\n\n\t\t# lazylist consumers\n\t\tlist, last, length, foldl, best, all, any, foreach,\n\t}\n\nmodule.exports = this_module\n\tSymbol: Symbol ? {iterator: 'iter'}\n",null],"sourceRoot":"/source/"}